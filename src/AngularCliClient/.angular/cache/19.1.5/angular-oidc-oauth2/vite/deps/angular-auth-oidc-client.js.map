{
  "version": 3,
  "sources": ["../../../../../../node_modules/rfc4648/lib/index.js", "../../../../../../node_modules/rfc4648/lib/index.mjs", "../../../../../../node_modules/angular-auth-oidc-client/fesm2020/angular-auth-oidc-client.mjs"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nfunction parse(string, encoding, opts) {\n  var _opts$out;\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  } // The string must have a whole number of bytes:\n\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  } // Count the padding bytes:\n\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end; // If we get a whole number of bytes, there is too much padding:\n\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  } // Allocate the output:\n\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  var written = 0; // Next byte to write\n\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    } // Append the bits to the buffer:\n\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n}\nfunction stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var _opts = opts,\n    _opts$pad = _opts.pad,\n    pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse$1(string, opts) {\n    return parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse$1(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar codec = {\n  parse: parse,\n  stringify: stringify\n};\nexports.base16 = base16;\nexports.base32 = base32;\nexports.base32hex = base32hex;\nexports.base64 = base64;\nexports.base64url = base64url;\nexports.codec = codec;", "// Generated by rollup-plugin-mjs-entry\n\nimport cjs from './index.js';\nexport const base16 = cjs.base16;\nexport const base32 = cjs.base32;\nexport const base32hex = cjs.base32hex;\nexport const base64 = cjs.base64;\nexport const base64url = cjs.base64url;\nexport const codec = cjs.codec;\nexport default cjs;", "import { DOCUMENT, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams, HttpErrorResponse, HttpResponse, HttpClientModule } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, PLATFORM_ID, InjectionToken, NgModule, inject } from '@angular/core';\nimport { ReplaySubject, from, of, BehaviorSubject, Observable, throwError, timer, Subject, forkJoin, TimeoutError } from 'rxjs';\nimport { map, mergeMap, tap, distinctUntilChanged, take, switchMap, retryWhen, catchError, retry, concatMap, finalize, timeout } from 'rxjs/operators';\nimport { base64url } from 'rfc4648';\nimport * as i2 from '@angular/router';\nclass HttpBaseService {\n  constructor(http) {\n    this.http = http;\n  }\n  get(url, params) {\n    return this.http.get(url, params);\n  }\n  post(url, body, params) {\n    return this.http.post(url, body, params);\n  }\n}\nHttpBaseService.ɵfac = function HttpBaseService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || HttpBaseService)(i0.ɵɵinject(i1.HttpClient));\n};\nHttpBaseService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpBaseService,\n  factory: HttpBaseService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpBaseService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();\nconst NGSW_CUSTOM_PARAM = 'ngsw-bypass';\nclass DataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  get(url, config, token) {\n    const headers = this.prepareHeaders(token);\n    const params = this.prepareParams(config);\n    return this.httpClient.get(url, {\n      headers,\n      params\n    });\n  }\n  post(url, body, config, headersParams) {\n    const headers = headersParams || this.prepareHeaders();\n    const params = this.prepareParams(config);\n    return this.httpClient.post(url, body, {\n      headers,\n      params\n    });\n  }\n  prepareHeaders(token) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Accept', 'application/json');\n    if (!!token) {\n      headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n    }\n    return headers;\n  }\n  prepareParams(config) {\n    let params = new HttpParams();\n    const {\n      ngswBypass\n    } = config;\n    if (ngswBypass) {\n      params = params.set(NGSW_CUSTOM_PARAM, '');\n    }\n    return params;\n  }\n}\nDataService.ɵfac = function DataService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || DataService)(i0.ɵɵinject(HttpBaseService));\n};\nDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBaseService\n    }];\n  }, null);\n})();\n\n// eslint-disable-next-line no-shadow\nvar EventTypes;\n(function (EventTypes) {\n  /**\r\n   *  This only works in the AppModule Constructor\r\n   */\n  EventTypes[EventTypes[\"ConfigLoaded\"] = 0] = \"ConfigLoaded\";\n  EventTypes[EventTypes[\"CheckingAuth\"] = 1] = \"CheckingAuth\";\n  EventTypes[EventTypes[\"CheckingAuthFinished\"] = 2] = \"CheckingAuthFinished\";\n  EventTypes[EventTypes[\"CheckingAuthFinishedWithError\"] = 3] = \"CheckingAuthFinishedWithError\";\n  EventTypes[EventTypes[\"ConfigLoadingFailed\"] = 4] = \"ConfigLoadingFailed\";\n  EventTypes[EventTypes[\"CheckSessionReceived\"] = 5] = \"CheckSessionReceived\";\n  EventTypes[EventTypes[\"UserDataChanged\"] = 6] = \"UserDataChanged\";\n  EventTypes[EventTypes[\"NewAuthenticationResult\"] = 7] = \"NewAuthenticationResult\";\n  EventTypes[EventTypes[\"TokenExpired\"] = 8] = \"TokenExpired\";\n  EventTypes[EventTypes[\"IdTokenExpired\"] = 9] = \"IdTokenExpired\";\n  EventTypes[EventTypes[\"SilentRenewStarted\"] = 10] = \"SilentRenewStarted\";\n  EventTypes[EventTypes[\"SilentRenewFailed\"] = 11] = \"SilentRenewFailed\";\n})(EventTypes || (EventTypes = {}));\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"None\"] = 0] = \"None\";\n  LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n  LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n  LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\n})(LogLevel || (LogLevel = {}));\n\n/**\r\n * Implement this class-interface to create a custom logger service.\r\n */\nclass AbstractLoggerService {}\nAbstractLoggerService.ɵfac = function AbstractLoggerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AbstractLoggerService)();\n};\nAbstractLoggerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AbstractLoggerService,\n  factory: AbstractLoggerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractLoggerService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass LoggerService {\n  constructor(abstractLoggerService) {\n    this.abstractLoggerService = abstractLoggerService;\n  }\n  logError(configuration, message, ...args) {\n    if (this.loggingIsTurnedOff(configuration)) {\n      return;\n    }\n    const {\n      configId\n    } = configuration;\n    const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;\n    if (!!args && !!args.length) {\n      this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`, ...args);\n    } else {\n      this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`);\n    }\n  }\n  logWarning(configuration, message, ...args) {\n    if (!this.logLevelIsSet(configuration)) {\n      return;\n    }\n    if (this.loggingIsTurnedOff(configuration)) {\n      return;\n    }\n    if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Warn)) {\n      return;\n    }\n    const {\n      configId\n    } = configuration;\n    const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;\n    if (!!args && !!args.length) {\n      this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`, ...args);\n    } else {\n      this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`);\n    }\n  }\n  logDebug(configuration, message, ...args) {\n    if (!this.logLevelIsSet(configuration)) {\n      return;\n    }\n    if (this.loggingIsTurnedOff(configuration)) {\n      return;\n    }\n    if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Debug)) {\n      return;\n    }\n    const {\n      configId\n    } = configuration;\n    const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;\n    if (!!args && !!args.length) {\n      this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`, ...args);\n    } else {\n      this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`);\n    }\n  }\n  currentLogLevelIsEqualOrSmallerThan(configuration, logLevelToCompare) {\n    const {\n      logLevel\n    } = configuration || {};\n    return logLevel <= logLevelToCompare;\n  }\n  logLevelIsSet(configuration) {\n    const {\n      logLevel\n    } = configuration || {};\n    if (logLevel === null) {\n      return false;\n    }\n    if (logLevel === undefined) {\n      return false;\n    }\n    return true;\n  }\n  loggingIsTurnedOff(configuration) {\n    const {\n      logLevel\n    } = configuration || {};\n    return logLevel === LogLevel.None;\n  }\n  isObject(possibleObject) {\n    return Object.prototype.toString.call(possibleObject) === '[object Object]';\n  }\n}\nLoggerService.ɵfac = function LoggerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || LoggerService)(i0.ɵɵinject(AbstractLoggerService));\n};\nLoggerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LoggerService,\n  factory: LoggerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoggerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AbstractLoggerService\n    }];\n  }, null);\n})();\n\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\nclass AbstractSecurityStorage {}\nAbstractSecurityStorage.ɵfac = function AbstractSecurityStorage_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AbstractSecurityStorage)();\n};\nAbstractSecurityStorage.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AbstractSecurityStorage,\n  factory: AbstractSecurityStorage.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractSecurityStorage, [{\n    type: Injectable\n  }], null, null);\n})();\nclass BrowserStorageService {\n  constructor(loggerService, abstractSecurityStorage) {\n    this.loggerService = loggerService;\n    this.abstractSecurityStorage = abstractSecurityStorage;\n  }\n  read(key, configuration) {\n    const {\n      configId\n    } = configuration;\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configuration, `Wanted to read '${key}' but Storage was undefined`);\n      return null;\n    }\n    const storedConfig = this.abstractSecurityStorage.read(configId);\n    if (!storedConfig) {\n      return null;\n    }\n    return JSON.parse(storedConfig);\n  }\n  write(value, configuration) {\n    const {\n      configId\n    } = configuration;\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configuration, `Wanted to write '${value}' but Storage was falsy`);\n      return false;\n    }\n    value = value || null;\n    this.abstractSecurityStorage.write(configId, JSON.stringify(value));\n    return true;\n  }\n  remove(key, configuration) {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configuration, `Wanted to remove '${key}' but Storage was falsy`);\n      return false;\n    }\n    // const storage = this.getStorage(configuration);\n    // if (!storage) {\n    //   this.loggerService.logDebug(configuration, `Wanted to write '${key}' but Storage was falsy`);\n    //   return false;\n    // }\n    this.abstractSecurityStorage.remove(key);\n    return true;\n  }\n  // TODO THIS STORAGE WANTS AN ID BUT CLEARS EVERYTHING\n  clear(configuration) {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);\n      return false;\n    }\n    // const storage = this.getStorage(configuration);\n    // if (!storage) {\n    //   this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);\n    //   return false;\n    // }\n    this.abstractSecurityStorage.clear();\n    return true;\n  }\n  hasStorage() {\n    return typeof Storage !== 'undefined';\n  }\n}\nBrowserStorageService.ɵfac = function BrowserStorageService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || BrowserStorageService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(AbstractSecurityStorage));\n};\nBrowserStorageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BrowserStorageService,\n  factory: BrowserStorageService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserStorageService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: AbstractSecurityStorage\n    }];\n  }, null);\n})();\nclass StoragePersistenceService {\n  constructor(browserStorageService) {\n    this.browserStorageService = browserStorageService;\n  }\n  read(key, config) {\n    const storedConfig = this.browserStorageService.read(key, config) || {};\n    return storedConfig[key];\n  }\n  write(key, value, config) {\n    const storedConfig = this.browserStorageService.read(key, config) || {};\n    storedConfig[key] = value;\n    return this.browserStorageService.write(storedConfig, config);\n  }\n  remove(key, config) {\n    const storedConfig = this.browserStorageService.read(key, config) || {};\n    delete storedConfig[key];\n    this.browserStorageService.write(storedConfig, config);\n  }\n  clear(config) {\n    this.browserStorageService.clear(config);\n  }\n  resetStorageFlowData(config) {\n    this.remove('session_state', config);\n    this.remove('storageSilentRenewRunning', config);\n    this.remove('storageCodeFlowInProgress', config);\n    this.remove('codeVerifier', config);\n    this.remove('userData', config);\n    this.remove('storageCustomParamsAuthRequest', config);\n    this.remove('access_token_expires_at', config);\n    this.remove('storageCustomParamsRefresh', config);\n    this.remove('storageCustomParamsEndSession', config);\n    this.remove('reusable_refresh_token', config);\n  }\n  resetAuthStateInStorage(config) {\n    this.remove('authzData', config);\n    this.remove('reusable_refresh_token', config);\n    this.remove('authnResult', config);\n  }\n  getAccessToken(config) {\n    return this.read('authzData', config);\n  }\n  getIdToken(config) {\n    return this.read('authnResult', config)?.id_token;\n  }\n  getRefreshToken(config) {\n    let refreshToken = this.read('authnResult', config)?.refresh_token;\n    if (!refreshToken && config.allowUnsafeReuseRefreshToken) {\n      return this.read('reusable_refresh_token', config);\n    }\n    return refreshToken;\n  }\n  getAuthenticationResult(config) {\n    return this.read('authnResult', config);\n  }\n}\nStoragePersistenceService.ɵfac = function StoragePersistenceService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || StoragePersistenceService)(i0.ɵɵinject(BrowserStorageService));\n};\nStoragePersistenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StoragePersistenceService,\n  factory: StoragePersistenceService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoragePersistenceService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserStorageService\n    }];\n  }, null);\n})();\nclass PublicEventsService {\n  constructor() {\n    this.notify = new ReplaySubject(1);\n  }\n  /**\r\n   * Fires a new event.\r\n   *\r\n   * @param type The event type.\r\n   * @param value The event value.\r\n   */\n  fireEvent(type, value) {\n    this.notify.next({\n      type,\n      value\n    });\n  }\n  /**\r\n   * Wires up the event notification observable.\r\n   */\n  registerForEvents() {\n    return this.notify.asObservable();\n  }\n}\nPublicEventsService.ɵfac = function PublicEventsService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || PublicEventsService)();\n};\nPublicEventsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PublicEventsService,\n  factory: PublicEventsService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PublicEventsService, [{\n    type: Injectable\n  }], null, null);\n})();\nfunction getVerifyAlg(alg) {\n  switch (alg.charAt(0)) {\n    case 'R':\n      return {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: 'SHA-256'\n      };\n    case 'E':\n      if (alg.includes('256')) {\n        return {\n          name: 'ECDSA',\n          hash: 'SHA-256'\n        };\n      } else if (alg.includes('384')) {\n        return {\n          name: 'ECDSA',\n          hash: 'SHA-384'\n        };\n      } else {\n        return null;\n      }\n    default:\n      return null;\n  }\n}\nfunction alg2kty(alg) {\n  switch (alg.charAt(0)) {\n    case 'R':\n      return 'RSA';\n    case 'E':\n      return 'EC';\n    default:\n      throw new Error('Cannot infer kty from alg: ' + alg);\n  }\n}\nfunction getImportAlg(alg) {\n  switch (alg.charAt(0)) {\n    case 'R':\n      if (alg.includes('256')) {\n        return {\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: 'SHA-256'\n        };\n      } else if (alg.includes('384')) {\n        return {\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: 'SHA-384'\n        };\n      } else if (alg.includes('512')) {\n        return {\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: 'SHA-512'\n        };\n      } else {\n        return null;\n      }\n    case 'E':\n      if (alg.includes('256')) {\n        return {\n          name: 'ECDSA',\n          namedCurve: 'P-256'\n        };\n      } else if (alg.includes('384')) {\n        return {\n          name: 'ECDSA',\n          namedCurve: 'P-384'\n        };\n      } else {\n        return null;\n      }\n    default:\n      return null;\n  }\n}\nconst PARTS_OF_TOKEN = 3;\nclass TokenHelperService {\n  constructor(loggerService, document) {\n    this.loggerService = loggerService;\n    this.document = document;\n  }\n  getTokenExpirationDate(dataIdToken) {\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'exp')) {\n      return new Date(new Date().toUTCString());\n    }\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(dataIdToken.exp);\n    return date;\n  }\n  getSigningInputFromToken(token, encoded, configuration) {\n    if (!this.tokenIsValid(token, configuration)) {\n      return '';\n    }\n    const header = this.getHeaderFromToken(token, encoded, configuration);\n    const payload = this.getPayloadFromToken(token, encoded, configuration);\n    return [header, payload].join('.');\n  }\n  getHeaderFromToken(token, encoded, configuration) {\n    if (!this.tokenIsValid(token, configuration)) {\n      return {};\n    }\n    return this.getPartOfToken(token, 0, encoded);\n  }\n  getPayloadFromToken(token, encoded, configuration) {\n    if (!this.tokenIsValid(token, configuration)) {\n      return {};\n    }\n    return this.getPartOfToken(token, 1, encoded);\n  }\n  getSignatureFromToken(token, encoded, configuration) {\n    if (!this.tokenIsValid(token, configuration)) {\n      return {};\n    }\n    return this.getPartOfToken(token, 2, encoded);\n  }\n  getPartOfToken(token, index, encoded) {\n    const partOfToken = this.extractPartOfToken(token, index);\n    if (encoded) {\n      return partOfToken;\n    }\n    const result = this.urlBase64Decode(partOfToken);\n    return JSON.parse(result);\n  }\n  urlBase64Decode(str) {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += '==';\n        break;\n      case 3:\n        output += '=';\n        break;\n      default:\n        throw Error('Illegal base64url string!');\n    }\n    const decoded = typeof this.document.defaultView !== 'undefined' ? this.document.defaultView.atob(output) : Buffer.from(output, 'base64').toString('binary');\n    try {\n      // Going backwards: from byte stream, to percent-encoding, to original string.\n      return decodeURIComponent(decoded.split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n    } catch (err) {\n      return decoded;\n    }\n  }\n  tokenIsValid(token, configuration) {\n    if (!token) {\n      this.loggerService.logError(configuration, `token '${token}' is not valid --> token falsy`);\n      return false;\n    }\n    if (!token.includes('.')) {\n      this.loggerService.logError(configuration, `token '${token}' is not valid --> no dots included`);\n      return false;\n    }\n    const parts = token.split('.');\n    if (parts.length !== PARTS_OF_TOKEN) {\n      this.loggerService.logError(configuration, `token '${token}' is not valid --> token has to have exactly ${PARTS_OF_TOKEN - 1} dots`);\n      return false;\n    }\n    return true;\n  }\n  extractPartOfToken(token, index) {\n    return token.split('.')[index];\n  }\n}\nTokenHelperService.ɵfac = function TokenHelperService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || TokenHelperService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(DOCUMENT));\n};\nTokenHelperService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TokenHelperService,\n  factory: TokenHelperService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TokenHelperService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass JwkExtractor {\n  static buildErrorName(name) {\n    return JwkExtractor.name + ': ' + name;\n  }\n  extractJwk(keys, spec, throwOnEmpty = true) {\n    if (0 === keys.length) {\n      throw JwkExtractor.InvalidArgumentError;\n    }\n    let foundKeys = keys.filter(k => spec?.kid ? k['kid'] === spec.kid : true).filter(k => spec?.use ? k['use'] === spec.use : true).filter(k => spec?.kty ? k['kty'] === spec.kty : true);\n    if (foundKeys.length === 0 && throwOnEmpty) {\n      throw JwkExtractor.NoMatchingKeysError;\n    }\n    if (foundKeys.length > 1 && (null === spec || undefined === spec)) {\n      throw JwkExtractor.SeveralMatchingKeysError;\n    }\n    return foundKeys;\n  }\n}\nJwkExtractor.InvalidArgumentError = {\n  name: JwkExtractor.buildErrorName('InvalidArgumentError'),\n  message: 'Array of keys was empty. Unable to extract'\n};\nJwkExtractor.NoMatchingKeysError = {\n  name: JwkExtractor.buildErrorName('NoMatchingKeysError'),\n  message: 'No key found matching the spec'\n};\nJwkExtractor.SeveralMatchingKeysError = {\n  name: JwkExtractor.buildErrorName('SeveralMatchingKeysError'),\n  message: 'More than one key found. Please use spec to filter'\n};\nJwkExtractor.ɵfac = function JwkExtractor_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || JwkExtractor)();\n};\nJwkExtractor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: JwkExtractor,\n  factory: JwkExtractor.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JwkExtractor, [{\n    type: Injectable\n  }], null, null);\n})();\nclass CryptoService {\n  constructor(doc) {\n    this.doc = doc;\n  }\n  getCrypto() {\n    // support for IE,  (window.crypto || window.msCrypto)\n    return this.doc.defaultView.crypto || this.doc.defaultView.msCrypto;\n  }\n}\nCryptoService.ɵfac = function CryptoService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CryptoService)(i0.ɵɵinject(DOCUMENT));\n};\nCryptoService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CryptoService,\n  factory: CryptoService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CryptoService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass JwkWindowCryptoService {\n  constructor(cryptoService) {\n    this.cryptoService = cryptoService;\n  }\n  importVerificationKey(key, algorithm) {\n    return this.cryptoService.getCrypto().subtle.importKey('jwk', key, algorithm, false, ['verify']);\n  }\n  verifyKey(verifyAlgorithm, cryptoKey, signature, signingInput) {\n    return this.cryptoService.getCrypto().subtle.verify(verifyAlgorithm, cryptoKey, signature, new TextEncoder().encode(signingInput));\n  }\n}\nJwkWindowCryptoService.ɵfac = function JwkWindowCryptoService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || JwkWindowCryptoService)(i0.ɵɵinject(CryptoService));\n};\nJwkWindowCryptoService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: JwkWindowCryptoService,\n  factory: JwkWindowCryptoService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JwkWindowCryptoService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CryptoService\n    }];\n  }, null);\n})();\nclass JwtWindowCryptoService {\n  constructor(cryptoService) {\n    this.cryptoService = cryptoService;\n  }\n  generateCodeChallenge(codeVerifier) {\n    return this.calcHash(codeVerifier).pipe(map(challengeRaw => this.base64UrlEncode(challengeRaw)));\n  }\n  generateAtHash(accessToken, algorithm) {\n    return this.calcHash(accessToken, algorithm).pipe(map(tokenHash => {\n      let substr = tokenHash.substr(0, tokenHash.length / 2);\n      const tokenHashBase64 = btoa(substr);\n      return tokenHashBase64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n    }));\n  }\n  calcHash(valueToHash, algorithm = 'SHA-256') {\n    const msgBuffer = new TextEncoder().encode(valueToHash);\n    return from(this.cryptoService.getCrypto().subtle.digest(algorithm, msgBuffer)).pipe(map(hashBuffer => {\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      return this.toHashString(hashArray);\n    }));\n  }\n  toHashString(byteArray) {\n    let result = '';\n    for (let e of byteArray) {\n      result += String.fromCharCode(e);\n    }\n    return result;\n  }\n  base64UrlEncode(str) {\n    const base64 = btoa(str);\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  }\n}\nJwtWindowCryptoService.ɵfac = function JwtWindowCryptoService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || JwtWindowCryptoService)(i0.ɵɵinject(CryptoService));\n};\nJwtWindowCryptoService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: JwtWindowCryptoService,\n  factory: JwtWindowCryptoService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JwtWindowCryptoService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CryptoService\n    }];\n  }, null);\n})();\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\nclass TokenValidationService {\n  constructor(tokenHelperService, loggerService, jwkExtractor, jwkWindowCryptoService, jwtWindowCryptoService, document) {\n    this.tokenHelperService = tokenHelperService;\n    this.loggerService = loggerService;\n    this.jwkExtractor = jwkExtractor;\n    this.jwkWindowCryptoService = jwkWindowCryptoService;\n    this.jwtWindowCryptoService = jwtWindowCryptoService;\n    this.document = document;\n    this.keyAlgorithms = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n  }\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  hasIdTokenExpired(token, configuration, offsetSeconds) {\n    const decoded = this.tokenHelperService.getPayloadFromToken(token, false, configuration);\n    return !this.validateIdTokenExpNotExpired(decoded, configuration, offsetSeconds);\n  }\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  validateIdTokenExpNotExpired(decodedIdToken, configuration, offsetSeconds) {\n    const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n    offsetSeconds = offsetSeconds || 0;\n    if (!tokenExpirationDate) {\n      return false;\n    }\n    const tokenExpirationValue = tokenExpirationDate.valueOf();\n    const nowWithOffset = this.calculateNowWithOffset(offsetSeconds);\n    const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n    this.loggerService.logDebug(configuration, `Has idToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(tokenExpirationValue - nowWithOffset)} , ${new Date(tokenExpirationValue).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`);\n    return tokenNotExpired;\n  }\n  validateAccessTokenNotExpired(accessTokenExpiresAt, configuration, offsetSeconds) {\n    // value is optional, so if it does not exist, then it has not expired\n    if (!accessTokenExpiresAt) {\n      return true;\n    }\n    offsetSeconds = offsetSeconds || 0;\n    const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n    const nowWithOffset = this.calculateNowWithOffset(offsetSeconds);\n    const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n    this.loggerService.logDebug(configuration, `Has accessToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(accessTokenExpirationValue - nowWithOffset)} , ${new Date(accessTokenExpirationValue).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`);\n    return tokenNotExpired;\n  }\n  // iss\n  // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n  // https scheme that contains scheme, host,\n  // and optionally, port number and path components and no query or fragment components.\n  //\n  // sub\n  // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n  // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n  //\n  // aud\n  // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n  // audience value.\n  // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n  // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n  //\n  // exp\n  // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n  // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n  // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n  // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n  // the date/ time.\n  // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n  //\n  // iat\n  // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n  // 1970- 01 - 01T00: 00: 00Z as measured\n  // in UTC until the date/ time.\n  validateRequiredIdToken(dataIdToken, configuration) {\n    let validated = true;\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iss')) {\n      validated = false;\n      this.loggerService.logWarning(configuration, 'iss is missing, this is required in the id_token');\n    }\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'sub')) {\n      validated = false;\n      this.loggerService.logWarning(configuration, 'sub is missing, this is required in the id_token');\n    }\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'aud')) {\n      validated = false;\n      this.loggerService.logWarning(configuration, 'aud is missing, this is required in the id_token');\n    }\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'exp')) {\n      validated = false;\n      this.loggerService.logWarning(configuration, 'exp is missing, this is required in the id_token');\n    }\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iat')) {\n      validated = false;\n      this.loggerService.logWarning(configuration, 'iat is missing, this is required in the id_token');\n    }\n    return validated;\n  }\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n  validateIdTokenIatMaxOffset(dataIdToken, maxOffsetAllowedInSeconds, disableIatOffsetValidation, configuration) {\n    if (disableIatOffsetValidation) {\n      return true;\n    }\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iat')) {\n      return false;\n    }\n    const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n    maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n    const nowInUtc = new Date(new Date().toUTCString());\n    const diff = nowInUtc.valueOf() - dateTimeIatIdToken.valueOf();\n    const maxOffsetAllowedInMilliseconds = maxOffsetAllowedInSeconds * 1000;\n    this.loggerService.logDebug(configuration, `validate id token iat max offset ${diff} < ${maxOffsetAllowedInMilliseconds}`);\n    if (diff > 0) {\n      return diff < maxOffsetAllowedInMilliseconds;\n    }\n    return -diff < maxOffsetAllowedInMilliseconds;\n  }\n  // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n  // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n  // The precise method for detecting replay attacks is Client specific.\n  // However the nonce claim SHOULD not be present for the refresh_token grant type\n  // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n  // The current spec is ambiguous and KeyCloak does send it.\n  validateIdTokenNonce(dataIdToken, localNonce, ignoreNonceAfterRefresh, configuration) {\n    const isFromRefreshToken = (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === TokenValidationService.refreshTokenNoncePlaceholder;\n    if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n      this.loggerService.logDebug(configuration, 'Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce);\n      return false;\n    }\n    return true;\n  }\n  // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n  // MUST exactly match the value of the iss (issuer) Claim.\n  validateIdTokenIss(dataIdToken, authWellKnownEndpointsIssuer, configuration) {\n    if (dataIdToken.iss !== authWellKnownEndpointsIssuer) {\n      this.loggerService.logDebug(configuration, 'Validate_id_token_iss failed, dataIdToken.iss: ' + dataIdToken.iss + ' authWellKnownEndpoints issuer:' + authWellKnownEndpointsIssuer);\n      return false;\n    }\n    return true;\n  }\n  // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n  // by the iss (issuer) Claim as an audience.\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n  // not trusted by the Client.\n  validateIdTokenAud(dataIdToken, aud, configuration) {\n    if (Array.isArray(dataIdToken.aud)) {\n      const result = dataIdToken.aud.includes(aud);\n      if (!result) {\n        this.loggerService.logDebug(configuration, 'Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n        return false;\n      }\n      return true;\n    } else if (dataIdToken.aud !== aud) {\n      this.loggerService.logDebug(configuration, 'Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n      return false;\n    }\n    return true;\n  }\n  validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken) {\n    if (!dataIdToken) {\n      return false;\n    }\n    if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken.azp) {\n      return false;\n    }\n    return true;\n  }\n  // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n  validateIdTokenAzpValid(dataIdToken, clientId) {\n    if (!dataIdToken?.azp) {\n      return true;\n    }\n    if (dataIdToken.azp === clientId) {\n      return true;\n    }\n    return false;\n  }\n  validateStateFromHashCallback(state, localState, configuration) {\n    if (state !== localState) {\n      this.loggerService.logDebug(configuration, 'ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n      return false;\n    }\n    return true;\n  }\n  // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n  // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n  // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n  // OpenID Connect Core 1.0 [OpenID.Core] specification.\n  validateSignatureIdToken(idToken, jwtkeys, configuration) {\n    if (!idToken) {\n      return of(true);\n    }\n    if (!jwtkeys || !jwtkeys.keys) {\n      return of(false);\n    }\n    const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false, configuration);\n    if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n      this.loggerService.logWarning(configuration, 'id token has no header data');\n      return of(false);\n    }\n    const kid = headerData.kid;\n    let alg = headerData.alg;\n    let keys = jwtkeys.keys;\n    let foundKeys;\n    let key;\n    if (!this.keyAlgorithms.includes(alg)) {\n      this.loggerService.logWarning(configuration, 'alg not supported', alg);\n      return of(false);\n    }\n    const kty = alg2kty(alg);\n    const use = 'sig';\n    try {\n      foundKeys = kid ? this.jwkExtractor.extractJwk(keys, {\n        kid,\n        kty,\n        use\n      }, false) : this.jwkExtractor.extractJwk(keys, {\n        kty,\n        use\n      }, false);\n      if (foundKeys.length === 0) {\n        foundKeys = kid ? this.jwkExtractor.extractJwk(keys, {\n          kid,\n          kty\n        }) : this.jwkExtractor.extractJwk(keys, {\n          kty\n        });\n      }\n      key = foundKeys[0];\n    } catch (e) {\n      this.loggerService.logError(configuration, e);\n      return of(false);\n    }\n    const algorithm = getImportAlg(alg);\n    const signingInput = this.tokenHelperService.getSigningInputFromToken(idToken, true, configuration);\n    const rawSignature = this.tokenHelperService.getSignatureFromToken(idToken, true, configuration);\n    const agent = this.document.defaultView.navigator.userAgent.toLowerCase();\n    if (agent.indexOf('firefox') > -1 && key.kty === 'EC') {\n      key.alg = '';\n    }\n    return from(this.jwkWindowCryptoService.importVerificationKey(key, algorithm)).pipe(mergeMap(cryptoKey => {\n      const signature = base64url.parse(rawSignature, {\n        loose: true\n      });\n      const verifyAlgorithm = getVerifyAlg(alg);\n      return from(this.jwkWindowCryptoService.verifyKey(verifyAlgorithm, cryptoKey, signature, signingInput));\n    }), tap(isValid => {\n      if (!isValid) {\n        this.loggerService.logWarning(configuration, 'incorrect Signature, validation failed for id_token');\n      }\n    }));\n  }\n  // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n  //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n  ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n  ////    if (!header_data.hasOwnProperty('kid')) {\n  ////        // no kid defined in Jose header\n  ////        if (jwtkeys.keys.length != 1) {\n  ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n  ////            return false;\n  ////        }\n  ////    }\n  ////    return true;\n  //// }\n  // Access Token Validation\n  // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n  // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n  // access_token C2: Take the left- most half of the hash and base64url- encode it.\n  // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n  // is present in the ID Token.\n  validateIdTokenAtHash(accessToken, atHash, idTokenAlg, configuration) {\n    this.loggerService.logDebug(configuration, 'at_hash from the server:' + atHash);\n    // 'sha256' 'sha384' 'sha512'\n    let sha = 'SHA-256';\n    if (idTokenAlg.includes('384')) {\n      sha = 'SHA-384';\n    } else if (idTokenAlg.includes('512')) {\n      sha = 'SHA-512';\n    }\n    return this.jwtWindowCryptoService.generateAtHash('' + accessToken, sha).pipe(mergeMap(hash => {\n      this.loggerService.logDebug(configuration, 'at_hash client validation not decoded:' + hash);\n      if (hash === atHash) {\n        return of(true); // isValid;\n      } else {\n        return this.jwtWindowCryptoService.generateAtHash('' + decodeURIComponent(accessToken), sha).pipe(map(newHash => {\n          this.loggerService.logDebug(configuration, '-gen access--' + hash);\n          return newHash === atHash;\n        }));\n      }\n    }));\n  }\n  millisToMinutesAndSeconds(millis) {\n    const minutes = Math.floor(millis / 60000);\n    const seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes + ':' + (+seconds < 10 ? '0' : '') + seconds;\n  }\n  calculateNowWithOffset(offsetSeconds) {\n    return new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n  }\n}\nTokenValidationService.refreshTokenNoncePlaceholder = '--RefreshToken--';\nTokenValidationService.ɵfac = function TokenValidationService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || TokenValidationService)(i0.ɵɵinject(TokenHelperService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(JwkExtractor), i0.ɵɵinject(JwkWindowCryptoService), i0.ɵɵinject(JwtWindowCryptoService), i0.ɵɵinject(DOCUMENT));\n};\nTokenValidationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TokenValidationService,\n  factory: TokenValidationService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TokenValidationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TokenHelperService\n    }, {\n      type: LoggerService\n    }, {\n      type: JwkExtractor\n    }, {\n      type: JwkWindowCryptoService\n    }, {\n      type: JwtWindowCryptoService\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nconst DEFAULT_AUTHRESULT = {\n  isAuthenticated: false,\n  allConfigsAuthenticated: []\n};\nclass AuthStateService {\n  constructor(storagePersistenceService, loggerService, publicEventsService, tokenValidationService) {\n    this.storagePersistenceService = storagePersistenceService;\n    this.loggerService = loggerService;\n    this.publicEventsService = publicEventsService;\n    this.tokenValidationService = tokenValidationService;\n    this.authenticatedInternal$ = new BehaviorSubject(DEFAULT_AUTHRESULT);\n  }\n  get authenticated$() {\n    return this.authenticatedInternal$.asObservable().pipe(distinctUntilChanged());\n  }\n  setAuthenticatedAndFireEvent(allConfigs) {\n    const result = this.composeAuthenticatedResult(allConfigs);\n    this.authenticatedInternal$.next(result);\n  }\n  setUnauthenticatedAndFireEvent(currentConfig, allConfigs) {\n    this.storagePersistenceService.resetAuthStateInStorage(currentConfig);\n    const result = this.composeUnAuthenticatedResult(allConfigs);\n    this.authenticatedInternal$.next(result);\n  }\n  updateAndPublishAuthState(authenticationResult) {\n    this.publicEventsService.fireEvent(EventTypes.NewAuthenticationResult, authenticationResult);\n  }\n  setAuthorizationData(accessToken, authResult, currentConfig, allConfigs) {\n    this.loggerService.logDebug(currentConfig, `storing the accessToken '${accessToken}'`);\n    this.storagePersistenceService.write('authzData', accessToken, currentConfig);\n    this.persistAccessTokenExpirationTime(authResult, currentConfig);\n    this.setAuthenticatedAndFireEvent(allConfigs);\n  }\n  getAccessToken(configuration) {\n    if (!this.isAuthenticated(configuration)) {\n      return null;\n    }\n    const token = this.storagePersistenceService.getAccessToken(configuration);\n    return this.decodeURIComponentSafely(token);\n  }\n  getIdToken(configuration) {\n    if (!this.isAuthenticated(configuration)) {\n      return null;\n    }\n    const token = this.storagePersistenceService.getIdToken(configuration);\n    return this.decodeURIComponentSafely(token);\n  }\n  getRefreshToken(configuration) {\n    if (!this.isAuthenticated(configuration)) {\n      return null;\n    }\n    const token = this.storagePersistenceService.getRefreshToken(configuration);\n    return this.decodeURIComponentSafely(token);\n  }\n  getAuthenticationResult(configuration) {\n    if (!this.isAuthenticated(configuration)) {\n      return null;\n    }\n    return this.storagePersistenceService.getAuthenticationResult(configuration);\n  }\n  areAuthStorageTokensValid(configuration) {\n    if (!this.isAuthenticated(configuration)) {\n      return false;\n    }\n    if (this.hasIdTokenExpiredAndRenewCheckIsEnabled(configuration)) {\n      this.loggerService.logDebug(configuration, 'persisted idToken is expired');\n      return false;\n    }\n    if (this.hasAccessTokenExpiredIfExpiryExists(configuration)) {\n      this.loggerService.logDebug(configuration, 'persisted accessToken is expired');\n      return false;\n    }\n    this.loggerService.logDebug(configuration, 'persisted idToken and accessToken are valid');\n    return true;\n  }\n  hasIdTokenExpiredAndRenewCheckIsEnabled(configuration) {\n    const {\n      renewTimeBeforeTokenExpiresInSeconds,\n      triggerRefreshWhenIdTokenExpired,\n      disableIdTokenValidation\n    } = configuration;\n    if (!triggerRefreshWhenIdTokenExpired || disableIdTokenValidation) {\n      return false;\n    }\n    const tokenToCheck = this.storagePersistenceService.getIdToken(configuration);\n    const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, configuration, renewTimeBeforeTokenExpiresInSeconds);\n    if (idTokenExpired) {\n      this.publicEventsService.fireEvent(EventTypes.IdTokenExpired, idTokenExpired);\n    }\n    return idTokenExpired;\n  }\n  hasAccessTokenExpiredIfExpiryExists(configuration) {\n    const {\n      renewTimeBeforeTokenExpiresInSeconds\n    } = configuration;\n    const accessTokenExpiresIn = this.storagePersistenceService.read('access_token_expires_at', configuration);\n    const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(accessTokenExpiresIn, configuration, renewTimeBeforeTokenExpiresInSeconds);\n    const hasExpired = !accessTokenHasNotExpired;\n    if (hasExpired) {\n      this.publicEventsService.fireEvent(EventTypes.TokenExpired, hasExpired);\n    }\n    return hasExpired;\n  }\n  isAuthenticated(configuration) {\n    const hasAccessToken = !!this.storagePersistenceService.getAccessToken(configuration);\n    const hasIdToken = !!this.storagePersistenceService.getIdToken(configuration);\n    return hasAccessToken && hasIdToken;\n  }\n  decodeURIComponentSafely(token) {\n    if (token) {\n      return decodeURIComponent(token);\n    } else {\n      return '';\n    }\n  }\n  persistAccessTokenExpirationTime(authResult, configuration) {\n    if (authResult?.expires_in) {\n      const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() + authResult.expires_in * 1000;\n      this.storagePersistenceService.write('access_token_expires_at', accessTokenExpiryTime, configuration);\n    }\n  }\n  composeAuthenticatedResult(allConfigs) {\n    if (allConfigs.length === 1) {\n      const {\n        configId\n      } = allConfigs[0];\n      return {\n        isAuthenticated: true,\n        allConfigsAuthenticated: [{\n          configId,\n          isAuthenticated: true\n        }]\n      };\n    }\n    return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);\n  }\n  composeUnAuthenticatedResult(allConfigs) {\n    if (allConfigs.length === 1) {\n      const {\n        configId\n      } = allConfigs[0];\n      return {\n        isAuthenticated: false,\n        allConfigsAuthenticated: [{\n          configId,\n          isAuthenticated: false\n        }]\n      };\n    }\n    return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);\n  }\n  checkAllConfigsIfTheyAreAuthenticated(allConfigs) {\n    const allConfigsAuthenticated = allConfigs.map(config => ({\n      configId: config.configId,\n      isAuthenticated: this.isAuthenticated(config)\n    }));\n    const isAuthenticated = allConfigsAuthenticated.every(x => !!x.isAuthenticated);\n    return {\n      allConfigsAuthenticated,\n      isAuthenticated\n    };\n  }\n}\nAuthStateService.ɵfac = function AuthStateService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AuthStateService)(i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(PublicEventsService), i0.ɵɵinject(TokenValidationService));\n};\nAuthStateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthStateService,\n  factory: AuthStateService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthStateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StoragePersistenceService\n    }, {\n      type: LoggerService\n    }, {\n      type: PublicEventsService\n    }, {\n      type: TokenValidationService\n    }];\n  }, null);\n})();\nclass IFrameService {\n  constructor(document, loggerService) {\n    this.document = document;\n    this.loggerService = loggerService;\n  }\n  getExistingIFrame(identifier) {\n    const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n    if (this.isIFrameElement(iFrameOnParent)) {\n      return iFrameOnParent;\n    }\n    const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n    if (this.isIFrameElement(iFrameOnSelf)) {\n      return iFrameOnSelf;\n    }\n    return null;\n  }\n  addIFrameToWindowBody(identifier, config) {\n    const sessionIframe = this.document.createElement('iframe');\n    sessionIframe.id = identifier;\n    sessionIframe.title = identifier;\n    this.loggerService.logDebug(config, sessionIframe);\n    sessionIframe.style.display = 'none';\n    this.document.body.appendChild(sessionIframe);\n    return sessionIframe;\n  }\n  getIFrameFromParentWindow(identifier) {\n    try {\n      const iFrameElement = this.document.defaultView.parent.document.getElementById(identifier);\n      if (this.isIFrameElement(iFrameElement)) {\n        return iFrameElement;\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  getIFrameFromWindow(identifier) {\n    const iFrameElement = this.document.getElementById(identifier);\n    if (this.isIFrameElement(iFrameElement)) {\n      return iFrameElement;\n    }\n    return null;\n  }\n  isIFrameElement(element) {\n    return !!element && element instanceof HTMLIFrameElement;\n  }\n}\nIFrameService.ɵfac = function IFrameService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || IFrameService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LoggerService));\n};\nIFrameService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IFrameService,\n  factory: IFrameService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IFrameService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: LoggerService\n    }];\n  }, null);\n})();\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\nclass CheckSessionService {\n  constructor(storagePersistenceService, loggerService, iFrameService, eventService, zone, document) {\n    this.storagePersistenceService = storagePersistenceService;\n    this.loggerService = loggerService;\n    this.iFrameService = iFrameService;\n    this.eventService = eventService;\n    this.zone = zone;\n    this.document = document;\n    this.checkSessionReceived = false;\n    this.lastIFrameRefresh = 0;\n    this.outstandingMessages = 0;\n    this.heartBeatInterval = 3000;\n    this.iframeRefreshInterval = 60000;\n    this.checkSessionChangedInternal$ = new BehaviorSubject(false);\n  }\n  get checkSessionChanged$() {\n    return this.checkSessionChangedInternal$.asObservable();\n  }\n  isCheckSessionConfigured(configuration) {\n    const {\n      startCheckSession\n    } = configuration;\n    return startCheckSession;\n  }\n  start(configuration) {\n    if (!!this.scheduledHeartBeatRunning) {\n      return;\n    }\n    const {\n      clientId\n    } = configuration;\n    this.pollServerSession(clientId, configuration);\n  }\n  stop() {\n    if (!this.scheduledHeartBeatRunning) {\n      return;\n    }\n    this.clearScheduledHeartBeat();\n    this.checkSessionReceived = false;\n  }\n  serverStateChanged(configuration) {\n    const {\n      startCheckSession\n    } = configuration;\n    return startCheckSession && this.checkSessionReceived;\n  }\n  getExistingIframe() {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n  }\n  init(configuration) {\n    if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n      return of(undefined);\n    }\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning(configuration, 'CheckSession - init check session: authWellKnownEndpoints is undefined. Returning.');\n      return of();\n    }\n    const existingIframe = this.getOrCreateIframe(configuration);\n    const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;\n    if (checkSessionIframe) {\n      existingIframe.contentWindow.location.replace(checkSessionIframe);\n    } else {\n      this.loggerService.logWarning(configuration, 'CheckSession - init check session: checkSessionIframe is not configured to run');\n    }\n    return new Observable(observer => {\n      existingIframe.onload = () => {\n        this.lastIFrameRefresh = Date.now();\n        observer.next();\n        observer.complete();\n      };\n    });\n  }\n  pollServerSession(clientId, configuration) {\n    this.outstandingMessages = 0;\n    const pollServerSessionRecur = () => {\n      this.init(configuration).pipe(take(1)).subscribe(() => {\n        const existingIframe = this.getExistingIframe();\n        if (existingIframe && clientId) {\n          this.loggerService.logDebug(configuration, `CheckSession - clientId : '${clientId}' - existingIframe: '${existingIframe}'`);\n          const sessionState = this.storagePersistenceService.read('session_state', configuration);\n          const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n          if (sessionState && authWellKnownEndPoints?.checkSessionIframe) {\n            const iframeOrigin = new URL(authWellKnownEndPoints.checkSessionIframe)?.origin;\n            this.outstandingMessages++;\n            existingIframe.contentWindow.postMessage(clientId + ' ' + sessionState, iframeOrigin);\n          } else {\n            this.loggerService.logDebug(configuration, `CheckSession - session_state is '${sessionState}' - AuthWellKnownEndPoints is '${JSON.stringify(authWellKnownEndPoints, null, 2)}'`);\n            this.checkSessionChangedInternal$.next(true);\n          }\n        } else {\n          this.loggerService.logWarning(configuration, `CheckSession - OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist:\n               clientId : '${clientId}' - existingIframe: '${existingIframe}'`);\n        }\n        // after sending three messages with no response, fail.\n        if (this.outstandingMessages > 3) {\n          this.loggerService.logError(configuration, `CheckSession - OidcSecurityCheckSession not receiving check session response messages.\n                            Outstanding messages: '${this.outstandingMessages}'. Server unreachable?`);\n        }\n        this.zone.runOutsideAngular(() => {\n          this.scheduledHeartBeatRunning = setTimeout(() => this.zone.run(pollServerSessionRecur), this.heartBeatInterval);\n        });\n      });\n    };\n    pollServerSessionRecur();\n  }\n  clearScheduledHeartBeat() {\n    clearTimeout(this.scheduledHeartBeatRunning);\n    this.scheduledHeartBeatRunning = null;\n  }\n  messageHandler(configuration, e) {\n    const existingIFrame = this.getExistingIframe();\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(e.origin);\n    this.outstandingMessages = 0;\n    if (existingIFrame && startsWith && e.source === existingIFrame.contentWindow) {\n      if (e.data === 'error') {\n        this.loggerService.logWarning(configuration, 'CheckSession - error from check session messageHandler');\n      } else if (e.data === 'changed') {\n        this.loggerService.logDebug(configuration, `CheckSession - ${e} from check session messageHandler`);\n        this.checkSessionReceived = true;\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.checkSessionChangedInternal$.next(true);\n      } else {\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.loggerService.logDebug(configuration, `CheckSession - ${e.data} from check session messageHandler`);\n      }\n    }\n  }\n  bindMessageEventToIframe(configuration) {\n    const iframeMessageEvent = this.messageHandler.bind(this, configuration);\n    this.document.defaultView.addEventListener('message', iframeMessageEvent, false);\n  }\n  getOrCreateIframe(configuration) {\n    const existingIframe = this.getExistingIframe();\n    if (!existingIframe) {\n      const frame = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER, configuration);\n      this.bindMessageEventToIframe(configuration);\n      return frame;\n    }\n    return existingIframe;\n  }\n}\nCheckSessionService.ɵfac = function CheckSessionService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CheckSessionService)(i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(IFrameService), i0.ɵɵinject(PublicEventsService), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\nCheckSessionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CheckSessionService,\n  factory: CheckSessionService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CheckSessionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StoragePersistenceService\n    }, {\n      type: LoggerService\n    }, {\n      type: IFrameService\n    }, {\n      type: PublicEventsService\n    }, {\n      type: i0.NgZone\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass CurrentUrlService {\n  constructor(document) {\n    this.document = document;\n  }\n  getStateParamFromCurrentUrl(url) {\n    const currentUrl = url || this.getCurrentUrl();\n    const parsedUrl = new URL(currentUrl);\n    const urlParams = new URLSearchParams(parsedUrl.search);\n    const stateFromUrl = urlParams.get('state');\n    return stateFromUrl;\n  }\n  getCurrentUrl() {\n    return this.document.defaultView.location.toString();\n  }\n}\nCurrentUrlService.ɵfac = function CurrentUrlService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CurrentUrlService)(i0.ɵɵinject(DOCUMENT));\n};\nCurrentUrlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CurrentUrlService,\n  factory: CurrentUrlService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrentUrlService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nvar ValidationResult;\n(function (ValidationResult) {\n  ValidationResult[\"NotSet\"] = \"NotSet\";\n  ValidationResult[\"StatesDoNotMatch\"] = \"StatesDoNotMatch\";\n  ValidationResult[\"SignatureFailed\"] = \"SignatureFailed\";\n  ValidationResult[\"IncorrectNonce\"] = \"IncorrectNonce\";\n  ValidationResult[\"RequiredPropertyMissing\"] = \"RequiredPropertyMissing\";\n  ValidationResult[\"MaxOffsetExpired\"] = \"MaxOffsetExpired\";\n  ValidationResult[\"IssDoesNotMatchIssuer\"] = \"IssDoesNotMatchIssuer\";\n  ValidationResult[\"NoAuthWellKnownEndPoints\"] = \"NoAuthWellKnownEndPoints\";\n  ValidationResult[\"IncorrectAud\"] = \"IncorrectAud\";\n  ValidationResult[\"IncorrectIdTokenClaimsAfterRefresh\"] = \"IncorrectIdTokenClaimsAfterRefresh\";\n  ValidationResult[\"IncorrectAzp\"] = \"IncorrectAzp\";\n  ValidationResult[\"TokenExpired\"] = \"TokenExpired\";\n  ValidationResult[\"IncorrectAtHash\"] = \"IncorrectAtHash\";\n  ValidationResult[\"Ok\"] = \"Ok\";\n  ValidationResult[\"LoginRequired\"] = \"LoginRequired\";\n  ValidationResult[\"SecureTokenServerError\"] = \"SecureTokenServerError\";\n})(ValidationResult || (ValidationResult = {}));\nclass UriEncoder {\n  encodeKey(key) {\n    return encodeURIComponent(key);\n  }\n  encodeValue(value) {\n    return encodeURIComponent(value);\n  }\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\nclass RandomService {\n  constructor(cryptoService, loggerService) {\n    this.cryptoService = cryptoService;\n    this.loggerService = loggerService;\n  }\n  createRandom(requiredLength, configuration) {\n    if (requiredLength <= 0) {\n      return '';\n    }\n    if (requiredLength > 0 && requiredLength < 7) {\n      this.loggerService.logWarning(configuration, `RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n      requiredLength = 10;\n    }\n    const length = requiredLength - 6;\n    const arr = new Uint8Array(Math.floor(length / 2));\n    const crypto = this.cryptoService.getCrypto();\n    if (crypto) {\n      crypto.getRandomValues(arr);\n    }\n    return Array.from(arr, this.toHex).join('') + this.randomString(7);\n  }\n  toHex(dec) {\n    return ('0' + dec.toString(16)).substr(-2);\n  }\n  randomString(length) {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = new Uint32Array(length);\n    const crypto = this.cryptoService.getCrypto();\n    if (crypto) {\n      crypto.getRandomValues(values);\n      for (let i = 0; i < length; i++) {\n        result += characters[values[i] % characters.length];\n      }\n    }\n    return result;\n  }\n}\nRandomService.ɵfac = function RandomService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RandomService)(i0.ɵɵinject(CryptoService), i0.ɵɵinject(LoggerService));\n};\nRandomService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RandomService,\n  factory: RandomService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RandomService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CryptoService\n    }, {\n      type: LoggerService\n    }];\n  }, null);\n})();\nclass FlowsDataService {\n  constructor(storagePersistenceService, randomService, loggerService) {\n    this.storagePersistenceService = storagePersistenceService;\n    this.randomService = randomService;\n    this.loggerService = loggerService;\n  }\n  createNonce(configuration) {\n    const nonce = this.randomService.createRandom(40, configuration);\n    this.loggerService.logDebug(configuration, 'Nonce created. nonce:' + nonce);\n    this.setNonce(nonce, configuration);\n    return nonce;\n  }\n  setNonce(nonce, configuration) {\n    this.storagePersistenceService.write('authNonce', nonce, configuration);\n  }\n  getAuthStateControl(configuration) {\n    return this.storagePersistenceService.read('authStateControl', configuration);\n  }\n  setAuthStateControl(authStateControl, configuration) {\n    return this.storagePersistenceService.write('authStateControl', authStateControl, configuration);\n  }\n  getExistingOrCreateAuthStateControl(configuration) {\n    let state = this.storagePersistenceService.read('authStateControl', configuration);\n    if (!state) {\n      state = this.randomService.createRandom(40, configuration);\n      this.storagePersistenceService.write('authStateControl', state, configuration);\n    }\n    return state;\n  }\n  setSessionState(sessionState, configuration) {\n    this.storagePersistenceService.write('session_state', sessionState, configuration);\n  }\n  resetStorageFlowData(configuration) {\n    this.storagePersistenceService.resetStorageFlowData(configuration);\n  }\n  getCodeVerifier(configuration) {\n    return this.storagePersistenceService.read('codeVerifier', configuration);\n  }\n  createCodeVerifier(configuration) {\n    const codeVerifier = this.randomService.createRandom(67, configuration);\n    this.storagePersistenceService.write('codeVerifier', codeVerifier, configuration);\n    return codeVerifier;\n  }\n  isCodeFlowInProgress(configuration) {\n    const storageObject = this.getCodeFlowInProgressStorageEntry(configuration);\n    if (!storageObject) {\n      return false;\n    }\n    return storageObject.state === 'in progress';\n  }\n  setCodeFlowInProgress(configuration) {\n    const storageObject = {\n      state: 'in progress'\n    };\n    this.storagePersistenceService.write('storageCodeFlowInProgress', JSON.stringify(storageObject), configuration);\n  }\n  resetCodeFlowInProgress(configuration) {\n    this.storagePersistenceService.write('storageCodeFlowInProgress', '', configuration);\n  }\n  getCodeFlowInProgressStorageEntry(configuration) {\n    const storageEntry = this.storagePersistenceService.read('storageCodeFlowInProgress', configuration);\n    if (!storageEntry) {\n      return null;\n    }\n    return JSON.parse(storageEntry);\n  }\n  isSilentRenewRunning(configuration) {\n    const {\n      configId,\n      silentRenewTimeoutInSeconds\n    } = configuration;\n    const storageObject = this.getSilentRenewRunningStorageEntry(configuration);\n    if (!storageObject) {\n      return false;\n    }\n    const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;\n    const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);\n    const currentDateUtc = Date.parse(new Date().toISOString());\n    const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);\n    const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;\n    if (isProbablyStuck) {\n      this.loggerService.logDebug(configuration, 'silent renew process is probably stuck, state will be reset.', configId);\n      this.resetSilentRenewRunning(configuration);\n      return false;\n    }\n    return storageObject.state === 'running';\n  }\n  setSilentRenewRunning(configuration) {\n    const storageObject = {\n      state: 'running',\n      dateOfLaunchedProcessUtc: new Date().toISOString()\n    };\n    this.storagePersistenceService.write('storageSilentRenewRunning', JSON.stringify(storageObject), configuration);\n  }\n  resetSilentRenewRunning(configuration) {\n    this.storagePersistenceService.write('storageSilentRenewRunning', '', configuration);\n  }\n  getSilentRenewRunningStorageEntry(configuration) {\n    const storageEntry = this.storagePersistenceService.read('storageSilentRenewRunning', configuration);\n    if (!storageEntry) {\n      return null;\n    }\n    return JSON.parse(storageEntry);\n  }\n}\nFlowsDataService.ɵfac = function FlowsDataService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || FlowsDataService)(i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(RandomService), i0.ɵɵinject(LoggerService));\n};\nFlowsDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FlowsDataService,\n  factory: FlowsDataService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FlowsDataService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StoragePersistenceService\n    }, {\n      type: RandomService\n    }, {\n      type: LoggerService\n    }];\n  }, null);\n})();\nclass FlowHelper {\n  isCurrentFlowCodeFlow(configuration) {\n    return this.currentFlowIs('code', configuration);\n  }\n  isCurrentFlowAnyImplicitFlow(configuration) {\n    return this.isCurrentFlowImplicitFlowWithAccessToken(configuration) || this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration);\n  }\n  isCurrentFlowCodeFlowWithRefreshTokens(configuration) {\n    const {\n      useRefreshToken\n    } = configuration;\n    if (this.isCurrentFlowCodeFlow(configuration) && useRefreshToken) {\n      return true;\n    }\n    return false;\n  }\n  isCurrentFlowImplicitFlowWithAccessToken(configuration) {\n    return this.currentFlowIs('id_token token', configuration);\n  }\n  currentFlowIs(flowTypes, configuration) {\n    const {\n      responseType\n    } = configuration;\n    if (Array.isArray(flowTypes)) {\n      return flowTypes.some(x => responseType === x);\n    }\n    return responseType === flowTypes;\n  }\n  isCurrentFlowImplicitFlowWithoutAccessToken(configuration) {\n    return this.currentFlowIs('id_token', configuration);\n  }\n}\nFlowHelper.ɵfac = function FlowHelper_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || FlowHelper)();\n};\nFlowHelper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FlowHelper,\n  factory: FlowHelper.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FlowHelper, [{\n    type: Injectable\n  }], null, null);\n})();\nconst CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\nconst AUTH0_ENDPOINT = 'auth0.com';\nclass UrlService {\n  constructor(loggerService, flowsDataService, flowHelper, storagePersistenceService, jwtWindowCryptoService) {\n    this.loggerService = loggerService;\n    this.flowsDataService = flowsDataService;\n    this.flowHelper = flowHelper;\n    this.storagePersistenceService = storagePersistenceService;\n    this.jwtWindowCryptoService = jwtWindowCryptoService;\n  }\n  getUrlParameter(urlToCheck, name) {\n    if (!urlToCheck) {\n      return '';\n    }\n    if (!name) {\n      return '';\n    }\n    name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    const regex = new RegExp('[\\\\?&#]' + name + '=([^&#]*)');\n    const results = regex.exec(urlToCheck);\n    return results === null ? '' : decodeURIComponent(results[1]);\n  }\n  isCallbackFromSts(currentUrl) {\n    return CALLBACK_PARAMS_TO_CHECK.some(x => !!this.getUrlParameter(currentUrl, x));\n  }\n  getRefreshSessionSilentRenewUrl(config, customParams) {\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\n      return this.createUrlCodeFlowWithSilentRenew(config, customParams);\n    }\n    return of(this.createUrlImplicitFlowWithSilentRenew(config, customParams) || '');\n  }\n  getAuthorizeParUrl(requestUri, configuration) {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logError(configuration, 'authWellKnownEndpoints is undefined');\n      return null;\n    }\n    const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(configuration, `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`);\n      return null;\n    }\n    const {\n      clientId\n    } = configuration;\n    if (!clientId) {\n      this.loggerService.logError(configuration, `getAuthorizeParUrl could not add clientId because it was: `, clientId);\n      return null;\n    }\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    const existingParams = urlParts[1];\n    let params = this.createHttpParams(existingParams);\n    params = params.set('request_uri', requestUri);\n    params = params.append('client_id', clientId);\n    return `${authorizationUrl}?${params}`;\n  }\n  getAuthorizeUrl(config, authOptions) {\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\n      return this.createUrlCodeFlowAuthorize(config, authOptions);\n    }\n    return of(this.createUrlImplicitFlowAuthorize(config, authOptions) || '');\n  }\n  getEndSessionEndpoint(configuration) {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    const endSessionEndpoint = authWellKnownEndPoints?.endSessionEndpoint;\n    if (!endSessionEndpoint) {\n      return {\n        url: '',\n        existingParams: ''\n      };\n    }\n    const urlParts = endSessionEndpoint.split('?');\n    const url = urlParts[0];\n    const existingParams = urlParts[1] ?? '';\n    return {\n      url,\n      existingParams\n    };\n  }\n  getEndSessionUrl(configuration, customParams) {\n    const idToken = this.storagePersistenceService.getIdToken(configuration);\n    const {\n      customParamsEndSessionRequest\n    } = configuration;\n    const mergedParams = {\n      ...customParamsEndSessionRequest,\n      ...customParams\n    };\n    return this.createEndSessionUrl(idToken, configuration, mergedParams);\n  }\n  createRevocationEndpointBodyAccessToken(token, configuration) {\n    const clientId = this.getClientId(configuration);\n    if (!clientId) {\n      return null;\n    }\n    let params = this.createHttpParams();\n    params = params.set('client_id', clientId);\n    params = params.set('token', token);\n    params = params.set('token_type_hint', 'access_token');\n    return params.toString();\n  }\n  createRevocationEndpointBodyRefreshToken(token, configuration) {\n    const clientId = this.getClientId(configuration);\n    if (!clientId) {\n      return null;\n    }\n    let params = this.createHttpParams();\n    params = params.set('client_id', clientId);\n    params = params.set('token', token);\n    params = params.set('token_type_hint', 'refresh_token');\n    return params.toString();\n  }\n  getRevocationEndpointUrl(configuration) {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    const revocationEndpoint = authWellKnownEndPoints?.revocationEndpoint;\n    if (!revocationEndpoint) {\n      return null;\n    }\n    const urlParts = revocationEndpoint.split('?');\n    const revocationEndpointUrl = urlParts[0];\n    return revocationEndpointUrl;\n  }\n  createBodyForCodeFlowCodeRequest(code, configuration, customTokenParams) {\n    const clientId = this.getClientId(configuration);\n    if (!clientId) {\n      return null;\n    }\n    let params = this.createHttpParams();\n    params = params.set('grant_type', 'authorization_code');\n    params = params.set('client_id', clientId);\n    if (!configuration.disablePkce) {\n      const codeVerifier = this.flowsDataService.getCodeVerifier(configuration);\n      if (!codeVerifier) {\n        this.loggerService.logError(configuration, `CodeVerifier is not set `, codeVerifier);\n        return null;\n      }\n      params = params.set('code_verifier', codeVerifier);\n    }\n    params = params.set('code', code);\n    if (customTokenParams) {\n      params = this.appendCustomParams({\n        ...customTokenParams\n      }, params);\n    }\n    const silentRenewUrl = this.getSilentRenewUrl(configuration);\n    if (this.flowsDataService.isSilentRenewRunning(configuration) && silentRenewUrl) {\n      params = params.set('redirect_uri', silentRenewUrl);\n      return params.toString();\n    }\n    const redirectUrl = this.getRedirectUrl(configuration);\n    if (!redirectUrl) {\n      return null;\n    }\n    params = params.set('redirect_uri', redirectUrl);\n    return params.toString();\n  }\n  createBodyForCodeFlowRefreshTokensRequest(refreshToken, configuration, customParamsRefresh) {\n    const clientId = this.getClientId(configuration);\n    if (!clientId) {\n      return null;\n    }\n    let params = this.createHttpParams();\n    params = params.set('grant_type', 'refresh_token');\n    params = params.set('client_id', clientId);\n    params = params.set('refresh_token', refreshToken);\n    if (customParamsRefresh) {\n      params = this.appendCustomParams({\n        ...customParamsRefresh\n      }, params);\n    }\n    return params.toString();\n  }\n  createBodyForParCodeFlowRequest(configuration, customParamsRequest) {\n    const redirectUrl = this.getRedirectUrl(configuration);\n    if (!redirectUrl) {\n      return of(null);\n    }\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\n    const nonce = this.flowsDataService.createNonce(configuration);\n    this.loggerService.logDebug(configuration, 'Authorize created. adding myautostate: ' + state);\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configuration);\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier).pipe(map(codeChallenge => {\n      const {\n        clientId,\n        responseType,\n        scope,\n        hdParam,\n        customParamsAuthRequest\n      } = configuration;\n      let params = this.createHttpParams('');\n      params = params.set('client_id', clientId);\n      params = params.append('redirect_uri', redirectUrl);\n      params = params.append('response_type', responseType);\n      params = params.append('scope', scope);\n      params = params.append('nonce', nonce);\n      params = params.append('state', state);\n      params = params.append('code_challenge', codeChallenge);\n      params = params.append('code_challenge_method', 'S256');\n      if (hdParam) {\n        params = params.append('hd', hdParam);\n      }\n      if (customParamsAuthRequest) {\n        params = this.appendCustomParams({\n          ...customParamsAuthRequest\n        }, params);\n      }\n      if (customParamsRequest) {\n        params = this.appendCustomParams({\n          ...customParamsRequest\n        }, params);\n      }\n      return params.toString();\n    }));\n  }\n  getPostLogoutRedirectUrl(configuration) {\n    const {\n      postLogoutRedirectUri\n    } = configuration;\n    if (!postLogoutRedirectUri) {\n      this.loggerService.logError(configuration, `could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\n      return null;\n    }\n    return postLogoutRedirectUri;\n  }\n  createEndSessionUrl(idTokenHint, configuration, customParamsEndSession) {\n    // Auth0 needs a special logout url\n    // See https://auth0.com/docs/api/authentication#logout\n    if (this.isAuth0Endpoint(configuration)) {\n      return this.composeAuth0Endpoint(configuration);\n    }\n    const {\n      url,\n      existingParams\n    } = this.getEndSessionEndpoint(configuration);\n    if (!url) {\n      return null;\n    }\n    let params = this.createHttpParams(existingParams);\n    if (!!idTokenHint) {\n      params = params.set('id_token_hint', idTokenHint);\n    }\n    const postLogoutRedirectUri = this.getPostLogoutRedirectUrl(configuration);\n    if (postLogoutRedirectUri) {\n      params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\n    }\n    if (customParamsEndSession) {\n      params = this.appendCustomParams({\n        ...customParamsEndSession\n      }, params);\n    }\n    return `${url}?${params}`;\n  }\n  createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, configuration, prompt, customRequestParams) {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    const authorizationEndpoint = authWellKnownEndPoints?.authorizationEndpoint;\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(configuration, `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`);\n      return null;\n    }\n    const {\n      clientId,\n      responseType,\n      scope,\n      hdParam,\n      customParamsAuthRequest\n    } = configuration;\n    if (!clientId) {\n      this.loggerService.logError(configuration, `createAuthorizeUrl could not add clientId because it was: `, clientId);\n      return null;\n    }\n    if (!responseType) {\n      this.loggerService.logError(configuration, `createAuthorizeUrl could not add responseType because it was: `, responseType);\n      return null;\n    }\n    if (!scope) {\n      this.loggerService.logError(configuration, `createAuthorizeUrl could not add scope because it was: `, scope);\n      return null;\n    }\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n    const existingParams = urlParts[1];\n    let params = this.createHttpParams(existingParams);\n    params = params.set('client_id', clientId);\n    params = params.append('redirect_uri', redirectUrl);\n    params = params.append('response_type', responseType);\n    params = params.append('scope', scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n    if (this.flowHelper.isCurrentFlowCodeFlow(configuration) && codeChallenge !== null) {\n      params = params.append('code_challenge', codeChallenge);\n      params = params.append('code_challenge_method', 'S256');\n    }\n    const mergedParams = {\n      ...customParamsAuthRequest,\n      ...customRequestParams\n    };\n    if (Object.keys(mergedParams).length > 0) {\n      params = this.appendCustomParams({\n        ...mergedParams\n      }, params);\n    }\n    if (prompt) {\n      params = this.overWriteParam(params, 'prompt', prompt);\n    }\n    if (hdParam) {\n      params = params.append('hd', hdParam);\n    }\n    return `${authorizationUrl}?${params}`;\n  }\n  createUrlImplicitFlowWithSilentRenew(configuration, customParams) {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\n    const nonce = this.flowsDataService.createNonce(configuration);\n    const silentRenewUrl = this.getSilentRenewUrl(configuration);\n    if (!silentRenewUrl) {\n      return null;\n    }\n    this.loggerService.logDebug(configuration, 'RefreshSession created. adding myautostate: ', state);\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, configuration, 'none', customParams);\n    }\n    this.loggerService.logError(configuration, 'authWellKnownEndpoints is undefined');\n    return null;\n  }\n  createUrlCodeFlowWithSilentRenew(configuration, customParams) {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\n    const nonce = this.flowsDataService.createNonce(configuration);\n    this.loggerService.logDebug(configuration, 'RefreshSession created. adding myautostate: ' + state);\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configuration);\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier).pipe(map(codeChallenge => {\n      const silentRenewUrl = this.getSilentRenewUrl(configuration);\n      if (!silentRenewUrl) {\n        return '';\n      }\n      const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n      if (authWellKnownEndPoints) {\n        return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, configuration, 'none', customParams);\n      }\n      this.loggerService.logWarning(configuration, 'authWellKnownEndpoints is undefined');\n      return null;\n    }));\n  }\n  createUrlImplicitFlowAuthorize(configuration, authOptions) {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\n    const nonce = this.flowsDataService.createNonce(configuration);\n    this.loggerService.logDebug(configuration, 'Authorize created. adding myautostate: ' + state);\n    const redirectUrl = this.getRedirectUrl(configuration, authOptions);\n    if (!redirectUrl) {\n      return null;\n    }\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    if (authWellKnownEndPoints) {\n      const {\n        customParams\n      } = authOptions || {};\n      return this.createAuthorizeUrl('', redirectUrl, nonce, state, configuration, null, customParams);\n    }\n    this.loggerService.logError(configuration, 'authWellKnownEndpoints is undefined');\n    return null;\n  }\n  createUrlCodeFlowAuthorize(config, authOptions) {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(config);\n    const nonce = this.flowsDataService.createNonce(config);\n    this.loggerService.logDebug(config, 'Authorize created. adding myautostate: ' + state);\n    const redirectUrl = this.getRedirectUrl(config, authOptions);\n    if (!redirectUrl) {\n      return of(null);\n    }\n    return this.getCodeChallenge(config).pipe(map(codeChallenge => {\n      const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\n      if (authWellKnownEndPoints) {\n        const {\n          customParams\n        } = authOptions || {};\n        return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, config, null, customParams);\n      }\n      this.loggerService.logError(config, 'authWellKnownEndpoints is undefined');\n      return '';\n    }));\n  }\n  getCodeChallenge(config) {\n    if (config.disablePkce) {\n      return of(null);\n    }\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier(config);\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier);\n  }\n  getRedirectUrl(configuration, authOptions) {\n    let {\n      redirectUrl\n    } = configuration;\n    if (authOptions?.redirectUrl) {\n      // override by redirectUrl from authOptions\n      redirectUrl = authOptions.redirectUrl;\n    }\n    if (!redirectUrl) {\n      this.loggerService.logError(configuration, `could not get redirectUrl, was: `, redirectUrl);\n      return null;\n    }\n    return redirectUrl;\n  }\n  getSilentRenewUrl(configuration) {\n    const {\n      silentRenewUrl\n    } = configuration;\n    if (!silentRenewUrl) {\n      this.loggerService.logError(configuration, `could not get silentRenewUrl, was: `, silentRenewUrl);\n      return null;\n    }\n    return silentRenewUrl;\n  }\n  getClientId(configuration) {\n    const {\n      clientId\n    } = configuration;\n    if (!clientId) {\n      this.loggerService.logError(configuration, `could not get clientId, was: `, clientId);\n      return null;\n    }\n    return clientId;\n  }\n  appendCustomParams(customParams, params) {\n    for (const [key, value] of Object.entries({\n      ...customParams\n    })) {\n      params = params.append(key, value.toString());\n    }\n    return params;\n  }\n  overWriteParam(params, key, value) {\n    return params.set(key, value);\n  }\n  createHttpParams(existingParams) {\n    existingParams = existingParams ?? '';\n    const params = new HttpParams({\n      fromString: existingParams,\n      encoder: new UriEncoder()\n    });\n    return params;\n  }\n  isAuth0Endpoint(configuration) {\n    const {\n      authority\n    } = configuration;\n    if (!authority) {\n      return false;\n    }\n    return authority.endsWith(AUTH0_ENDPOINT);\n  }\n  composeAuth0Endpoint(configuration) {\n    // format: https://YOUR_DOMAIN/v2/logout?client_id=YOUR_CLIENT_ID&returnTo=LOGOUT_URL\n    const {\n      authority,\n      clientId\n    } = configuration;\n    const postLogoutRedirectUrl = this.getPostLogoutRedirectUrl(configuration);\n    return `${authority}/v2/logout?client_id=${clientId}&returnTo=${postLogoutRedirectUrl}`;\n  }\n}\nUrlService.ɵfac = function UrlService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || UrlService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(FlowHelper), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(JwtWindowCryptoService));\n};\nUrlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UrlService,\n  factory: UrlService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UrlService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: FlowHelper\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: JwtWindowCryptoService\n    }];\n  }, null);\n})();\nclass CodeFlowCallbackHandlerService {\n  constructor(urlService, loggerService, tokenValidationService, flowsDataService, storagePersistenceService, dataService) {\n    this.urlService = urlService;\n    this.loggerService = loggerService;\n    this.tokenValidationService = tokenValidationService;\n    this.flowsDataService = flowsDataService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.dataService = dataService;\n  }\n  // STEP 1 Code Flow\n  codeFlowCallback(urlToCheck, config) {\n    const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n    const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n    const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state');\n    if (!state) {\n      this.loggerService.logDebug(config, 'no state in url');\n      return throwError(() => new Error('no state in url'));\n    }\n    if (!code) {\n      this.loggerService.logDebug(config, 'no code in url');\n      return throwError(() => new Error('no code in url'));\n    }\n    this.loggerService.logDebug(config, 'running validation for callback', urlToCheck);\n    const initialCallbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: false,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null\n    };\n    return of(initialCallbackContext);\n  }\n  // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n  codeFlowCodeRequest(callbackContext, config) {\n    const authStateControl = this.flowsDataService.getAuthStateControl(config);\n    const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(callbackContext.state, authStateControl, config);\n    if (!isStateCorrect) {\n      return throwError(() => new Error('codeFlowCodeRequest incorrect state'));\n    }\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError(() => new Error('Token Endpoint not defined'));\n    }\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n    const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code, config, config?.customParamsCodeRequest);\n    return this.dataService.post(tokenEndpoint, bodyForCodeFlow, config, headers).pipe(switchMap(response => {\n      let authResult = {\n        ...response,\n        state: callbackContext.state,\n        session_state: callbackContext.sessionState\n      };\n      callbackContext.authResult = authResult;\n      return of(callbackContext);\n    }), retryWhen(error => this.handleRefreshRetry(error, config)), catchError(error => {\n      const {\n        authority\n      } = config;\n      const errorMessage = `OidcService code request ${authority}`;\n      this.loggerService.logError(config, errorMessage, error);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  handleRefreshRetry(errors, config) {\n    return errors.pipe(mergeMap(error => {\n      // retry token refresh if there is no internet connection\n      if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n        const {\n          authority,\n          refreshTokenRetryInSeconds\n        } = config;\n        const errorMessage = `OidcService code request ${authority} - no internet connection`;\n        this.loggerService.logWarning(config, errorMessage, error);\n        return timer(refreshTokenRetryInSeconds * 1000);\n      }\n      return throwError(() => error);\n    }));\n  }\n}\nCodeFlowCallbackHandlerService.ɵfac = function CodeFlowCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CodeFlowCallbackHandlerService)(i0.ɵɵinject(UrlService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(TokenValidationService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(DataService));\n};\nCodeFlowCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CodeFlowCallbackHandlerService,\n  factory: CodeFlowCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodeFlowCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UrlService\n    }, {\n      type: LoggerService\n    }, {\n      type: TokenValidationService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: DataService\n    }];\n  }, null);\n})();\nconst DEFAULT_USERRESULT = {\n  userData: null,\n  allUserData: []\n};\nclass UserService {\n  constructor(oidcDataService, storagePersistenceService, eventService, loggerService, tokenHelperService, flowHelper) {\n    this.oidcDataService = oidcDataService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.eventService = eventService;\n    this.loggerService = loggerService;\n    this.tokenHelperService = tokenHelperService;\n    this.flowHelper = flowHelper;\n    this.userDataInternal$ = new BehaviorSubject(DEFAULT_USERRESULT);\n  }\n  get userData$() {\n    return this.userDataInternal$.asObservable();\n  }\n  getAndPersistUserDataInStore(currentConfiguration, allConfigs, isRenewProcess = false, idToken, decodedIdToken) {\n    idToken = idToken || this.storagePersistenceService.getIdToken(currentConfiguration);\n    decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false, currentConfiguration);\n    const existingUserDataFromStorage = this.getUserDataFromStore(currentConfiguration);\n    const haveUserData = !!existingUserDataFromStorage;\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(currentConfiguration);\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(currentConfiguration);\n    const accessToken = this.storagePersistenceService.getAccessToken(currentConfiguration);\n    if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n      this.loggerService.logDebug(currentConfiguration, `authCallback idToken flow with accessToken ${accessToken}`);\n      this.setUserDataToStore(decodedIdToken, currentConfiguration, allConfigs);\n      return of(decodedIdToken);\n    }\n    const {\n      renewUserInfoAfterTokenRenew\n    } = currentConfiguration;\n    if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {\n      return this.getUserDataOidcFlowAndSave(decodedIdToken.sub, currentConfiguration, allConfigs).pipe(switchMap(userData => {\n        this.loggerService.logDebug(currentConfiguration, 'Received user data: ', userData);\n        if (!!userData) {\n          this.loggerService.logDebug(currentConfiguration, 'accessToken: ', accessToken);\n          return of(userData);\n        } else {\n          return throwError(() => new Error('Received no user data, request failed'));\n        }\n      }));\n    }\n    return of(existingUserDataFromStorage);\n  }\n  getUserDataFromStore(currentConfiguration) {\n    return this.storagePersistenceService.read('userData', currentConfiguration) || null;\n  }\n  publishUserDataIfExists(currentConfiguration, allConfigs) {\n    const userData = this.getUserDataFromStore(currentConfiguration);\n    if (userData) {\n      this.fireUserDataEvent(currentConfiguration, allConfigs, userData);\n    }\n  }\n  setUserDataToStore(userData, currentConfiguration, allConfigs) {\n    this.storagePersistenceService.write('userData', userData, currentConfiguration);\n    this.fireUserDataEvent(currentConfiguration, allConfigs, userData);\n  }\n  resetUserDataInStore(currentConfiguration, allConfigs) {\n    this.storagePersistenceService.remove('userData', currentConfiguration);\n    this.fireUserDataEvent(currentConfiguration, allConfigs, null);\n  }\n  getUserDataOidcFlowAndSave(idTokenSub, currentConfiguration, allConfigs) {\n    return this.getIdentityUserData(currentConfiguration).pipe(map(data => {\n      if (this.validateUserDataSubIdToken(currentConfiguration, idTokenSub, data?.sub)) {\n        this.setUserDataToStore(data, currentConfiguration, allConfigs);\n        return data;\n      } else {\n        // something went wrong, user data sub does not match that from id_token\n        this.loggerService.logWarning(currentConfiguration, `User data sub does not match sub in id_token, resetting`);\n        this.resetUserDataInStore(currentConfiguration, allConfigs);\n        return null;\n      }\n    }));\n  }\n  getIdentityUserData(currentConfiguration) {\n    const token = this.storagePersistenceService.getAccessToken(currentConfiguration);\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', currentConfiguration);\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning(currentConfiguration, 'init check session: authWellKnownEndpoints is undefined');\n      return throwError(() => new Error('authWellKnownEndpoints is undefined'));\n    }\n    const userInfoEndpoint = authWellKnownEndPoints.userInfoEndpoint;\n    if (!userInfoEndpoint) {\n      this.loggerService.logError(currentConfiguration, 'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config');\n      return throwError(() => new Error('authWellKnownEndpoints.userinfo_endpoint is undefined'));\n    }\n    return this.oidcDataService.get(userInfoEndpoint, currentConfiguration, token).pipe(retry(2));\n  }\n  validateUserDataSubIdToken(currentConfiguration, idTokenSub, userDataSub) {\n    if (!idTokenSub) {\n      return false;\n    }\n    if (!userDataSub) {\n      return false;\n    }\n    if (idTokenSub !== userDataSub) {\n      this.loggerService.logDebug(currentConfiguration, 'validateUserDataSubIdToken failed', idTokenSub, userDataSub);\n      return false;\n    }\n    return true;\n  }\n  fireUserDataEvent(currentConfiguration, allConfigs, passedUserData) {\n    const userData = this.composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData);\n    this.userDataInternal$.next(userData);\n    const {\n      configId\n    } = currentConfiguration;\n    this.eventService.fireEvent(EventTypes.UserDataChanged, {\n      configId,\n      userData: passedUserData\n    });\n  }\n  composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData) {\n    const hasManyConfigs = allConfigs.length > 1;\n    if (!hasManyConfigs) {\n      const {\n        configId\n      } = currentConfiguration;\n      return this.composeSingleUserDataResult(configId, passedUserData);\n    }\n    const allUserData = allConfigs.map(config => {\n      const {\n        configId\n      } = currentConfiguration;\n      if (this.currentConfigIsToUpdate(configId, config)) {\n        return {\n          configId: config.configId,\n          userData: passedUserData\n        };\n      }\n      const alreadySavedUserData = this.storagePersistenceService.read('userData', config) || null;\n      return {\n        configId: config.configId,\n        userData: alreadySavedUserData\n      };\n    });\n    return {\n      userData: null,\n      allUserData\n    };\n  }\n  composeSingleUserDataResult(configId, userData) {\n    return {\n      userData,\n      allUserData: [{\n        configId,\n        userData\n      }]\n    };\n  }\n  currentConfigIsToUpdate(configId, config) {\n    return config.configId === configId;\n  }\n}\nUserService.ɵfac = function UserService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || UserService)(i0.ɵɵinject(DataService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(PublicEventsService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(TokenHelperService), i0.ɵɵinject(FlowHelper));\n};\nUserService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DataService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: PublicEventsService\n    }, {\n      type: LoggerService\n    }, {\n      type: TokenHelperService\n    }, {\n      type: FlowHelper\n    }];\n  }, null);\n})();\nclass ResetAuthDataService {\n  constructor(authStateService, flowsDataService, userService, loggerService) {\n    this.authStateService = authStateService;\n    this.flowsDataService = flowsDataService;\n    this.userService = userService;\n    this.loggerService = loggerService;\n  }\n  resetAuthorizationData(currentConfiguration, allConfigs) {\n    this.userService.resetUserDataInStore(currentConfiguration, allConfigs);\n    this.flowsDataService.resetStorageFlowData(currentConfiguration);\n    this.authStateService.setUnauthenticatedAndFireEvent(currentConfiguration, allConfigs);\n    this.loggerService.logDebug(currentConfiguration, 'Local Login information cleaned up and event fired');\n  }\n}\nResetAuthDataService.ɵfac = function ResetAuthDataService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ResetAuthDataService)(i0.ɵɵinject(AuthStateService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(UserService), i0.ɵɵinject(LoggerService));\n};\nResetAuthDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ResetAuthDataService,\n  factory: ResetAuthDataService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetAuthDataService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AuthStateService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: UserService\n    }, {\n      type: LoggerService\n    }];\n  }, null);\n})();\nclass ImplicitFlowCallbackHandlerService {\n  constructor(resetAuthDataService, loggerService, flowsDataService, document) {\n    this.resetAuthDataService = resetAuthDataService;\n    this.loggerService = loggerService;\n    this.flowsDataService = flowsDataService;\n    this.document = document;\n  }\n  // STEP 1 Code Flow\n  // STEP 1 Implicit Flow\n  implicitFlowCallback(config, allConfigs, hash) {\n    const isRenewProcessData = this.flowsDataService.isSilentRenewRunning(config);\n    this.loggerService.logDebug(config, 'BEGIN callback, no auth data');\n    if (!isRenewProcessData) {\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n    }\n    hash = hash || this.document.location.hash.substring(1);\n    const authResult = hash.split('&').reduce((resultData, item) => {\n      const parts = item.split('=');\n      resultData[parts.shift()] = parts.join('=');\n      return resultData;\n    }, {});\n    const callbackContext = {\n      code: null,\n      refreshToken: null,\n      state: null,\n      sessionState: null,\n      authResult,\n      isRenewProcess: isRenewProcessData,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null\n    };\n    return of(callbackContext);\n  }\n}\nImplicitFlowCallbackHandlerService.ɵfac = function ImplicitFlowCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ImplicitFlowCallbackHandlerService)(i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(DOCUMENT));\n};\nImplicitFlowCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ImplicitFlowCallbackHandlerService,\n  factory: ImplicitFlowCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ImplicitFlowCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ResetAuthDataService\n    }, {\n      type: LoggerService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass SigninKeyDataService {\n  constructor(storagePersistenceService, loggerService, dataService) {\n    this.storagePersistenceService = storagePersistenceService;\n    this.loggerService = loggerService;\n    this.dataService = dataService;\n  }\n  getSigningKeys(currentConfiguration) {\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', currentConfiguration);\n    const jwksUri = authWellKnownEndPoints?.jwksUri;\n    if (!jwksUri) {\n      const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${jwksUri}'`;\n      this.loggerService.logWarning(currentConfiguration, error);\n      return throwError(() => new Error(error));\n    }\n    this.loggerService.logDebug(currentConfiguration, 'Getting signinkeys from ', jwksUri);\n    return this.dataService.get(jwksUri, currentConfiguration).pipe(retry(2), catchError(e => this.handleErrorGetSigningKeys(e, currentConfiguration)));\n  }\n  handleErrorGetSigningKeys(errorResponse, currentConfiguration) {\n    let errMsg = '';\n    if (errorResponse instanceof HttpResponse) {\n      const body = errorResponse.body || {};\n      const err = JSON.stringify(body);\n      const {\n        status,\n        statusText\n      } = errorResponse;\n      errMsg = `${status || ''} - ${statusText || ''} ${err || ''}`;\n    } else {\n      const {\n        message\n      } = errorResponse;\n      errMsg = !!message ? message : `${errorResponse}`;\n    }\n    this.loggerService.logError(currentConfiguration, errMsg);\n    return throwError(() => new Error(errMsg));\n  }\n}\nSigninKeyDataService.ɵfac = function SigninKeyDataService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || SigninKeyDataService)(i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(DataService));\n};\nSigninKeyDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SigninKeyDataService,\n  factory: SigninKeyDataService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SigninKeyDataService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StoragePersistenceService\n    }, {\n      type: LoggerService\n    }, {\n      type: DataService\n    }];\n  }, null);\n})();\nconst JWT_KEYS = 'jwtKeys';\nclass HistoryJwtKeysCallbackHandlerService {\n  constructor(loggerService, authStateService, flowsDataService, signInKeyDataService, storagePersistenceService, resetAuthDataService, document) {\n    this.loggerService = loggerService;\n    this.authStateService = authStateService;\n    this.flowsDataService = flowsDataService;\n    this.signInKeyDataService = signInKeyDataService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.resetAuthDataService = resetAuthDataService;\n    this.document = document;\n  }\n  // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token\n  callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs) {\n    if (!this.responseHasIdToken(callbackContext)) {\n      const existingIdToken = this.storagePersistenceService.getIdToken(config);\n      callbackContext.authResult = {\n        ...callbackContext.authResult,\n        id_token: existingIdToken\n      };\n    }\n    this.storagePersistenceService.write('authnResult', callbackContext.authResult, config);\n    if (config.allowUnsafeReuseRefreshToken && callbackContext.authResult.refresh_token) {\n      this.storagePersistenceService.write('reusable_refresh_token', callbackContext.authResult.refresh_token, config);\n    }\n    if (this.historyCleanUpTurnedOn(config) && !callbackContext.isRenewProcess) {\n      this.resetBrowserHistory();\n    } else {\n      this.loggerService.logDebug(config, 'history clean up inactive');\n    }\n    if (callbackContext.authResult.error) {\n      const errorMessage = `AuthCallback AuthResult came with error: ${callbackContext.authResult.error}`;\n      this.loggerService.logDebug(config, errorMessage);\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n      this.flowsDataService.setNonce('', config);\n      this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n      return throwError(() => new Error(errorMessage));\n    }\n    this.loggerService.logDebug(config, `AuthResult '${JSON.stringify(callbackContext.authResult, null, 2)}'.\n      AuthCallback created, begin token validation`);\n    return this.signInKeyDataService.getSigningKeys(config).pipe(tap(jwtKeys => this.storeSigningKeys(jwtKeys, config)), catchError(err => {\n      // fallback: try to load jwtKeys from storage\n      const storedJwtKeys = this.readSigningKeys(config);\n      if (!!storedJwtKeys) {\n        this.loggerService.logWarning(config, `Failed to retrieve signing keys, fallback to stored keys`);\n        return of(storedJwtKeys);\n      }\n      return throwError(() => new Error(err));\n    }), switchMap(jwtKeys => {\n      if (jwtKeys) {\n        callbackContext.jwtKeys = jwtKeys;\n        return of(callbackContext);\n      }\n      const errorMessage = `Failed to retrieve signing key`;\n      this.loggerService.logWarning(config, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }), catchError(err => {\n      const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n      this.loggerService.logWarning(config, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  responseHasIdToken(callbackContext) {\n    return !!callbackContext?.authResult?.id_token;\n  }\n  handleResultErrorFromCallback(result, isRenewProcess) {\n    let validationResult = ValidationResult.SecureTokenServerError;\n    if (result.error === 'login_required') {\n      validationResult = ValidationResult.LoginRequired;\n    }\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: false,\n      validationResult,\n      isRenewProcess\n    });\n  }\n  historyCleanUpTurnedOn(config) {\n    const {\n      historyCleanupOff\n    } = config;\n    return !historyCleanupOff;\n  }\n  resetBrowserHistory() {\n    this.document.defaultView.history.replaceState({}, this.document.title, this.document.defaultView.location.origin + this.document.defaultView.location.pathname);\n  }\n  storeSigningKeys(jwtKeys, config) {\n    this.storagePersistenceService.write(JWT_KEYS, jwtKeys, config);\n  }\n  readSigningKeys(config) {\n    return this.storagePersistenceService.read(JWT_KEYS, config);\n  }\n}\nHistoryJwtKeysCallbackHandlerService.ɵfac = function HistoryJwtKeysCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || HistoryJwtKeysCallbackHandlerService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(SigninKeyDataService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(DOCUMENT));\n};\nHistoryJwtKeysCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HistoryJwtKeysCallbackHandlerService,\n  factory: HistoryJwtKeysCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HistoryJwtKeysCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: AuthStateService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: SigninKeyDataService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: ResetAuthDataService\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass UserCallbackHandlerService {\n  constructor(loggerService, authStateService, flowsDataService, userService, resetAuthDataService) {\n    this.loggerService = loggerService;\n    this.authStateService = authStateService;\n    this.flowsDataService = flowsDataService;\n    this.userService = userService;\n    this.resetAuthDataService = resetAuthDataService;\n  }\n  // STEP 5 userData\n  callbackUser(callbackContext, configuration, allConfigs) {\n    const {\n      isRenewProcess,\n      validationResult,\n      authResult,\n      refreshToken\n    } = callbackContext;\n    const {\n      autoUserInfo,\n      renewUserInfoAfterTokenRenew\n    } = configuration;\n    if (!autoUserInfo) {\n      if (!isRenewProcess || renewUserInfoAfterTokenRenew) {\n        // userData is set to the id_token decoded, auto get user data set to false\n        if (validationResult.decodedIdToken) {\n          this.userService.setUserDataToStore(validationResult.decodedIdToken, configuration, allConfigs);\n        }\n      }\n      if (!isRenewProcess && !refreshToken) {\n        this.flowsDataService.setSessionState(authResult.session_state, configuration);\n      }\n      this.publishAuthState(validationResult, isRenewProcess);\n      return of(callbackContext);\n    }\n    return this.userService.getAndPersistUserDataInStore(configuration, allConfigs, isRenewProcess, validationResult.idToken, validationResult.decodedIdToken).pipe(switchMap(userData => {\n      if (!!userData) {\n        if (!refreshToken) {\n          this.flowsDataService.setSessionState(authResult.session_state, configuration);\n        }\n        this.publishAuthState(validationResult, isRenewProcess);\n        return of(callbackContext);\n      } else {\n        this.resetAuthDataService.resetAuthorizationData(configuration, allConfigs);\n        this.publishUnauthenticatedState(validationResult, isRenewProcess);\n        const errorMessage = `Called for userData but they were ${userData}`;\n        this.loggerService.logWarning(configuration, errorMessage);\n        return throwError(() => new Error(errorMessage));\n      }\n    }), catchError(err => {\n      const errorMessage = `Failed to retrieve user info with error:  ${err}`;\n      this.loggerService.logWarning(configuration, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  publishAuthState(stateValidationResult, isRenewProcess) {\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: true,\n      validationResult: stateValidationResult.state,\n      isRenewProcess\n    });\n  }\n  publishUnauthenticatedState(stateValidationResult, isRenewProcess) {\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: false,\n      validationResult: stateValidationResult.state,\n      isRenewProcess\n    });\n  }\n}\nUserCallbackHandlerService.ɵfac = function UserCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || UserCallbackHandlerService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(UserService), i0.ɵɵinject(ResetAuthDataService));\n};\nUserCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserCallbackHandlerService,\n  factory: UserCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: AuthStateService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: UserService\n    }, {\n      type: ResetAuthDataService\n    }];\n  }, null);\n})();\nclass StateValidationResult {\n  constructor(accessToken = '', idToken = '', authResponseIsValid = false, decodedIdToken = {\n    at_hash: ''\n  }, state = ValidationResult.NotSet) {\n    this.accessToken = accessToken;\n    this.idToken = idToken;\n    this.authResponseIsValid = authResponseIsValid;\n    this.decodedIdToken = decodedIdToken;\n    this.state = state;\n  }\n}\nclass EqualityService {\n  isStringEqualOrNonOrderedArrayEqual(value1, value2) {\n    if (this.isNullOrUndefined(value1)) {\n      return false;\n    }\n    if (this.isNullOrUndefined(value2)) {\n      return false;\n    }\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      return false;\n    }\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n    return this.arraysHaveEqualContent(value1, value2);\n  }\n  areEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysStrictEqual(value1, value2);\n    }\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n    if (this.bothValuesAreObjects(value1, value2)) {\n      return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n    }\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      if (Array.isArray(value1) && this.valueIsString(value2)) {\n        return value1[0] === value2;\n      }\n      if (Array.isArray(value2) && this.valueIsString(value1)) {\n        return value2[0] === value1;\n      }\n    }\n    return value1 === value2;\n  }\n  oneValueIsStringAndTheOtherIsArray(value1, value2) {\n    return Array.isArray(value1) && this.valueIsString(value2) || Array.isArray(value2) && this.valueIsString(value1);\n  }\n  bothValuesAreObjects(value1, value2) {\n    return this.valueIsObject(value1) && this.valueIsObject(value2);\n  }\n  bothValuesAreStrings(value1, value2) {\n    return this.valueIsString(value1) && this.valueIsString(value2);\n  }\n  bothValuesAreArrays(value1, value2) {\n    return Array.isArray(value1) && Array.isArray(value2);\n  }\n  valueIsString(value) {\n    return typeof value === 'string' || value instanceof String;\n  }\n  valueIsObject(value) {\n    return typeof value === 'object';\n  }\n  arraysStrictEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    for (let i = arr1.length; i--;) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  arraysHaveEqualContent(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    return arr1.some(v => arr2.includes(v));\n  }\n  isNullOrUndefined(val) {\n    return val === null || val === undefined;\n  }\n}\nEqualityService.ɵfac = function EqualityService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || EqualityService)();\n};\nEqualityService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EqualityService,\n  factory: EqualityService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EqualityService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass StateValidationService {\n  constructor(storagePersistenceService, tokenValidationService, tokenHelperService, loggerService, equalityService, flowHelper) {\n    this.storagePersistenceService = storagePersistenceService;\n    this.tokenValidationService = tokenValidationService;\n    this.tokenHelperService = tokenHelperService;\n    this.loggerService = loggerService;\n    this.equalityService = equalityService;\n    this.flowHelper = flowHelper;\n  }\n  getValidatedStateResult(callbackContext, configuration) {\n    if (!callbackContext || callbackContext.authResult.error) {\n      return of(new StateValidationResult('', '', false, {}));\n    }\n    return this.validateState(callbackContext, configuration);\n  }\n  validateState(callbackContext, configuration) {\n    const toReturn = new StateValidationResult();\n    const authStateControl = this.storagePersistenceService.read('authStateControl', configuration);\n    if (!this.tokenValidationService.validateStateFromHashCallback(callbackContext.authResult.state, authStateControl, configuration)) {\n      this.loggerService.logWarning(configuration, 'authCallback incorrect state');\n      toReturn.state = ValidationResult.StatesDoNotMatch;\n      this.handleUnsuccessfulValidation(configuration);\n      return of(toReturn);\n    }\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(configuration);\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(configuration);\n    if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n      toReturn.accessToken = callbackContext.authResult.access_token;\n    }\n    const disableIdTokenValidation = configuration.disableIdTokenValidation;\n    if (disableIdTokenValidation) {\n      toReturn.state = ValidationResult.Ok;\n      // TODO TESTING\n      toReturn.authResponseIsValid = true;\n      return of(toReturn);\n    }\n    const isInRefreshTokenFlow = callbackContext.isRenewProcess && !!callbackContext.refreshToken;\n    const hasIdToken = !!callbackContext.authResult.id_token;\n    if (isInRefreshTokenFlow && !hasIdToken) {\n      toReturn.state = ValidationResult.Ok;\n      // TODO TESTING\n      toReturn.authResponseIsValid = true;\n      return of(toReturn);\n    }\n    if (callbackContext.authResult.id_token) {\n      const {\n        clientId,\n        issValidationOff,\n        maxIdTokenIatOffsetAllowedInSeconds,\n        disableIatOffsetValidation,\n        ignoreNonceAfterRefresh,\n        renewTimeBeforeTokenExpiresInSeconds\n      } = configuration;\n      toReturn.idToken = callbackContext.authResult.id_token;\n      toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false, configuration);\n      return this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys, configuration).pipe(mergeMap(isSignatureIdTokenValid => {\n        if (!isSignatureIdTokenValid) {\n          this.loggerService.logDebug(configuration, 'authCallback Signature validation failed id_token');\n          toReturn.state = ValidationResult.SignatureFailed;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        const authNonce = this.storagePersistenceService.read('authNonce', configuration);\n        if (!this.tokenValidationService.validateIdTokenNonce(toReturn.decodedIdToken, authNonce, ignoreNonceAfterRefresh, configuration)) {\n          this.loggerService.logWarning(configuration, 'authCallback incorrect nonce, did you call the checkAuth() method multiple times?');\n          toReturn.state = ValidationResult.IncorrectNonce;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken, configuration)) {\n          this.loggerService.logDebug(configuration, 'authCallback Validation, one of the REQUIRED properties missing from id_token');\n          toReturn.state = ValidationResult.RequiredPropertyMissing;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!isInRefreshTokenFlow && !this.tokenValidationService.validateIdTokenIatMaxOffset(toReturn.decodedIdToken, maxIdTokenIatOffsetAllowedInSeconds, disableIatOffsetValidation, configuration)) {\n          this.loggerService.logWarning(configuration, 'authCallback Validation, iat rejected id_token was issued too far away from the current time');\n          toReturn.state = ValidationResult.MaxOffsetExpired;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n        if (authWellKnownEndPoints) {\n          if (issValidationOff) {\n            this.loggerService.logDebug(configuration, 'iss validation is turned off, this is not recommended!');\n          } else if (!issValidationOff && !this.tokenValidationService.validateIdTokenIss(toReturn.decodedIdToken, authWellKnownEndPoints.issuer, configuration)) {\n            this.loggerService.logWarning(configuration, 'authCallback incorrect iss does not match authWellKnownEndpoints issuer');\n            toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n            this.handleUnsuccessfulValidation(configuration);\n            return of(toReturn);\n          }\n        } else {\n          this.loggerService.logWarning(configuration, 'authWellKnownEndpoints is undefined');\n          toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!this.tokenValidationService.validateIdTokenAud(toReturn.decodedIdToken, clientId, configuration)) {\n          this.loggerService.logWarning(configuration, 'authCallback incorrect aud');\n          toReturn.state = ValidationResult.IncorrectAud;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n          this.loggerService.logWarning(configuration, 'authCallback missing azp');\n          toReturn.state = ValidationResult.IncorrectAzp;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!this.tokenValidationService.validateIdTokenAzpValid(toReturn.decodedIdToken, clientId)) {\n          this.loggerService.logWarning(configuration, 'authCallback incorrect azp');\n          toReturn.state = ValidationResult.IncorrectAzp;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken, configuration)) {\n          this.loggerService.logWarning(configuration, 'authCallback pre, post id_token claims do not match in refresh');\n          toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        if (!isInRefreshTokenFlow && !this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken, configuration, renewTimeBeforeTokenExpiresInSeconds)) {\n          this.loggerService.logWarning(configuration, 'authCallback id token expired');\n          toReturn.state = ValidationResult.TokenExpired;\n          this.handleUnsuccessfulValidation(configuration);\n          return of(toReturn);\n        }\n        return this.validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configuration, callbackContext);\n      }));\n    } else {\n      this.loggerService.logDebug(configuration, 'No id_token found, skipping id_token validation');\n    }\n    return this.validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configuration, callbackContext);\n  }\n  validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configuration, callbackContext) {\n    // flow id_token\n    if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n      toReturn.authResponseIsValid = true;\n      toReturn.state = ValidationResult.Ok;\n      this.handleSuccessfulValidation(configuration);\n      this.handleUnsuccessfulValidation(configuration);\n      return of(toReturn);\n    }\n    // only do check if id_token returned, no always the case when using refresh tokens\n    if (callbackContext.authResult.id_token) {\n      const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false, configuration);\n      if (isCurrentFlowCodeFlow && !toReturn.decodedIdToken.at_hash) {\n        this.loggerService.logDebug(configuration, 'Code Flow active, and no at_hash in the id_token, skipping check!');\n      } else {\n        return this.tokenValidationService.validateIdTokenAtHash(toReturn.accessToken, toReturn.decodedIdToken.at_hash, idTokenHeader.alg,\n        // 'RS256'\n        configuration).pipe(map(valid => {\n          if (!valid || !toReturn.accessToken) {\n            this.loggerService.logWarning(configuration, 'authCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation(configuration);\n            return toReturn;\n          } else {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation(configuration);\n            return toReturn;\n          }\n        }));\n      }\n    }\n    toReturn.authResponseIsValid = true;\n    toReturn.state = ValidationResult.Ok;\n    this.handleSuccessfulValidation(configuration);\n    return of(toReturn);\n  }\n  isIdTokenAfterRefreshTokenRequestValid(callbackContext, newIdToken, configuration) {\n    const {\n      useRefreshToken,\n      disableRefreshIdTokenAuthTimeValidation\n    } = configuration;\n    if (!useRefreshToken) {\n      return true;\n    }\n    if (!callbackContext.existingIdToken) {\n      return true;\n    }\n    const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false, configuration);\n    // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n    // except that it might not contain an id_token.\n    // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n    // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.iss !== newIdToken.iss) {\n      this.loggerService.logDebug(configuration, `iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n      return false;\n    }\n    // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n    //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n    // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n    if (decodedIdToken.azp !== newIdToken.azp) {\n      this.loggerService.logDebug(configuration, `azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n      return false;\n    }\n    // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.sub !== newIdToken.sub) {\n      this.loggerService.logDebug(configuration, `sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n      return false;\n    }\n    // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (!this.equalityService.isStringEqualOrNonOrderedArrayEqual(decodedIdToken?.aud, newIdToken?.aud)) {\n      this.loggerService.logDebug(configuration, `aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`);\n      return false;\n    }\n    if (disableRefreshIdTokenAuthTimeValidation) {\n      return true;\n    }\n    // its iat Claim MUST represent the time that the new ID Token is issued,\n    // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n    // - not the time that the new ID token is issued,\n    if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n      this.loggerService.logDebug(configuration, `auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n      return false;\n    }\n    return true;\n  }\n  handleSuccessfulValidation(configuration) {\n    const {\n      autoCleanStateAfterAuthentication\n    } = configuration;\n    this.storagePersistenceService.write('authNonce', null, configuration);\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistenceService.write('authStateControl', '', configuration);\n    }\n    this.loggerService.logDebug(configuration, 'authCallback token(s) validated, continue');\n  }\n  handleUnsuccessfulValidation(configuration) {\n    const {\n      autoCleanStateAfterAuthentication\n    } = configuration;\n    this.storagePersistenceService.write('authNonce', null, configuration);\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistenceService.write('authStateControl', '', configuration);\n    }\n    this.loggerService.logDebug(configuration, 'authCallback token(s) invalid');\n  }\n}\nStateValidationService.ɵfac = function StateValidationService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || StateValidationService)(i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(TokenValidationService), i0.ɵɵinject(TokenHelperService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(EqualityService), i0.ɵɵinject(FlowHelper));\n};\nStateValidationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StateValidationService,\n  factory: StateValidationService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StateValidationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StoragePersistenceService\n    }, {\n      type: TokenValidationService\n    }, {\n      type: TokenHelperService\n    }, {\n      type: LoggerService\n    }, {\n      type: EqualityService\n    }, {\n      type: FlowHelper\n    }];\n  }, null);\n})();\nclass StateValidationCallbackHandlerService {\n  constructor(loggerService, stateValidationService, authStateService, resetAuthDataService, document) {\n    this.loggerService = loggerService;\n    this.stateValidationService = stateValidationService;\n    this.authStateService = authStateService;\n    this.resetAuthDataService = resetAuthDataService;\n    this.document = document;\n  }\n  // STEP 4 All flows\n  callbackStateValidation(callbackContext, configuration, allConfigs) {\n    return this.stateValidationService.getValidatedStateResult(callbackContext, configuration).pipe(map(validationResult => {\n      callbackContext.validationResult = validationResult;\n      if (validationResult.authResponseIsValid) {\n        this.authStateService.setAuthorizationData(validationResult.accessToken, callbackContext.authResult, configuration, allConfigs);\n        return callbackContext;\n      } else {\n        const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${this.document.location.hash}`;\n        this.loggerService.logWarning(configuration, errorMessage);\n        this.resetAuthDataService.resetAuthorizationData(configuration, allConfigs);\n        this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n        throw new Error(errorMessage);\n      }\n    }));\n  }\n  publishUnauthorizedState(stateValidationResult, isRenewProcess) {\n    this.authStateService.updateAndPublishAuthState({\n      isAuthenticated: false,\n      validationResult: stateValidationResult.state,\n      isRenewProcess\n    });\n  }\n}\nStateValidationCallbackHandlerService.ɵfac = function StateValidationCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || StateValidationCallbackHandlerService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(StateValidationService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(DOCUMENT));\n};\nStateValidationCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StateValidationCallbackHandlerService,\n  factory: StateValidationCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StateValidationCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: StateValidationService\n    }, {\n      type: AuthStateService\n    }, {\n      type: ResetAuthDataService\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass RefreshSessionCallbackHandlerService {\n  constructor(loggerService, authStateService, flowsDataService) {\n    this.loggerService = loggerService;\n    this.authStateService = authStateService;\n    this.flowsDataService = flowsDataService;\n  }\n  // STEP 1 Refresh session\n  refreshSessionWithRefreshTokens(config) {\n    const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl(config);\n    this.loggerService.logDebug(config, 'RefreshSession created. Adding myautostate: ' + stateData);\n    const refreshToken = this.authStateService.getRefreshToken(config);\n    const idToken = this.authStateService.getIdToken(config);\n    if (refreshToken) {\n      const callbackContext = {\n        code: null,\n        refreshToken,\n        state: stateData,\n        sessionState: null,\n        authResult: null,\n        isRenewProcess: true,\n        jwtKeys: null,\n        validationResult: null,\n        existingIdToken: idToken\n      };\n      this.loggerService.logDebug(config, 'found refresh code, obtaining new credentials with refresh code');\n      // Nonce is not used with refresh tokens; but Key cloak may send it anyway\n      this.flowsDataService.setNonce(TokenValidationService.refreshTokenNoncePlaceholder, config);\n      return of(callbackContext);\n    } else {\n      const errorMessage = 'no refresh token found, please login';\n      this.loggerService.logError(config, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n  }\n}\nRefreshSessionCallbackHandlerService.ɵfac = function RefreshSessionCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RefreshSessionCallbackHandlerService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(FlowsDataService));\n};\nRefreshSessionCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RefreshSessionCallbackHandlerService,\n  factory: RefreshSessionCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RefreshSessionCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: AuthStateService\n    }, {\n      type: FlowsDataService\n    }];\n  }, null);\n})();\nclass RefreshTokenCallbackHandlerService {\n  constructor(urlService, loggerService, dataService, storagePersistenceService) {\n    this.urlService = urlService;\n    this.loggerService = loggerService;\n    this.dataService = dataService;\n    this.storagePersistenceService = storagePersistenceService;\n  }\n  // STEP 2 Refresh Token\n  refreshTokensRequestTokens(callbackContext, config, customParamsRefresh) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError(() => new Error('Token Endpoint not defined'));\n    }\n    const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken, config, customParamsRefresh);\n    return this.dataService.post(tokenEndpoint, data, config, headers).pipe(switchMap(response => {\n      this.loggerService.logDebug(config, 'token refresh response: ', response);\n      response.state = callbackContext.state;\n      callbackContext.authResult = response;\n      return of(callbackContext);\n    }), retryWhen(error => this.handleRefreshRetry(error, config)), catchError(error => {\n      const {\n        authority\n      } = config;\n      const errorMessage = `OidcService code request ${authority}`;\n      this.loggerService.logError(config, errorMessage, error);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  handleRefreshRetry(errors, config) {\n    return errors.pipe(mergeMap(error => {\n      // retry token refresh if there is no internet connection\n      if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n        const {\n          authority,\n          refreshTokenRetryInSeconds\n        } = config;\n        const errorMessage = `OidcService code request ${authority} - no internet connection`;\n        this.loggerService.logWarning(config, errorMessage, error);\n        return timer(refreshTokenRetryInSeconds * 1000);\n      }\n      return throwError(() => error);\n    }));\n  }\n}\nRefreshTokenCallbackHandlerService.ɵfac = function RefreshTokenCallbackHandlerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RefreshTokenCallbackHandlerService)(i0.ɵɵinject(UrlService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(DataService), i0.ɵɵinject(StoragePersistenceService));\n};\nRefreshTokenCallbackHandlerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RefreshTokenCallbackHandlerService,\n  factory: RefreshTokenCallbackHandlerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RefreshTokenCallbackHandlerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UrlService\n    }, {\n      type: LoggerService\n    }, {\n      type: DataService\n    }, {\n      type: StoragePersistenceService\n    }];\n  }, null);\n})();\nclass FlowsService {\n  constructor(codeFlowCallbackHandlerService, implicitFlowCallbackHandlerService, historyJwtKeysCallbackHandlerService, userHandlerService, stateValidationCallbackHandlerService, refreshSessionCallbackHandlerService, refreshTokenCallbackHandlerService) {\n    this.codeFlowCallbackHandlerService = codeFlowCallbackHandlerService;\n    this.implicitFlowCallbackHandlerService = implicitFlowCallbackHandlerService;\n    this.historyJwtKeysCallbackHandlerService = historyJwtKeysCallbackHandlerService;\n    this.userHandlerService = userHandlerService;\n    this.stateValidationCallbackHandlerService = stateValidationCallbackHandlerService;\n    this.refreshSessionCallbackHandlerService = refreshSessionCallbackHandlerService;\n    this.refreshTokenCallbackHandlerService = refreshTokenCallbackHandlerService;\n  }\n  processCodeFlowCallback(urlToCheck, config, allConfigs) {\n    return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck, config).pipe(concatMap(callbackContext => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext, config)), concatMap(callbackContext => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap(callbackContext => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap(callbackContext => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));\n  }\n  processSilentRenewCodeFlowCallback(firstContext, config, allConfigs) {\n    return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext, config).pipe(concatMap(callbackContext => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap(callbackContext => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap(callbackContext => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));\n  }\n  processImplicitFlowCallback(config, allConfigs, hash) {\n    return this.implicitFlowCallbackHandlerService.implicitFlowCallback(config, allConfigs, hash).pipe(concatMap(callbackContext => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap(callbackContext => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap(callbackContext => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));\n  }\n  processRefreshToken(config, allConfigs, customParamsRefresh) {\n    return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens(config).pipe(concatMap(callbackContext => this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, config, customParamsRefresh)), concatMap(callbackContext => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap(callbackContext => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap(callbackContext => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));\n  }\n}\nFlowsService.ɵfac = function FlowsService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || FlowsService)(i0.ɵɵinject(CodeFlowCallbackHandlerService), i0.ɵɵinject(ImplicitFlowCallbackHandlerService), i0.ɵɵinject(HistoryJwtKeysCallbackHandlerService), i0.ɵɵinject(UserCallbackHandlerService), i0.ɵɵinject(StateValidationCallbackHandlerService), i0.ɵɵinject(RefreshSessionCallbackHandlerService), i0.ɵɵinject(RefreshTokenCallbackHandlerService));\n};\nFlowsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FlowsService,\n  factory: FlowsService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FlowsService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CodeFlowCallbackHandlerService\n    }, {\n      type: ImplicitFlowCallbackHandlerService\n    }, {\n      type: HistoryJwtKeysCallbackHandlerService\n    }, {\n      type: UserCallbackHandlerService\n    }, {\n      type: StateValidationCallbackHandlerService\n    }, {\n      type: RefreshSessionCallbackHandlerService\n    }, {\n      type: RefreshTokenCallbackHandlerService\n    }];\n  }, null);\n})();\nclass IntervalService {\n  constructor(zone) {\n    this.zone = zone;\n    this.runTokenValidationRunning = null;\n  }\n  isTokenValidationRunning() {\n    return !!this.runTokenValidationRunning;\n  }\n  stopPeriodicTokenCheck() {\n    if (this.runTokenValidationRunning) {\n      this.runTokenValidationRunning.unsubscribe();\n      this.runTokenValidationRunning = null;\n    }\n  }\n  startPeriodicTokenCheck(repeatAfterSeconds) {\n    const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\n    return new Observable(subscriber => {\n      let intervalId;\n      this.zone.runOutsideAngular(() => {\n        intervalId = setInterval(() => this.zone.run(() => subscriber.next()), millisecondsDelayBetweenTokenCheck);\n      });\n      return () => {\n        clearInterval(intervalId);\n      };\n    });\n  }\n}\nIntervalService.ɵfac = function IntervalService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || IntervalService)(i0.ɵɵinject(i0.NgZone));\n};\nIntervalService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IntervalService,\n  factory: IntervalService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IntervalService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass ImplicitFlowCallbackService {\n  constructor(flowsService, router, flowsDataService, intervalService) {\n    this.flowsService = flowsService;\n    this.router = router;\n    this.flowsDataService = flowsDataService;\n    this.intervalService = intervalService;\n  }\n  authenticatedImplicitFlowCallback(config, allConfigs, hash) {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(config);\n    const {\n      triggerAuthorizationResultEvent,\n      postLoginRoute,\n      unauthorizedRoute\n    } = config;\n    return this.flowsService.processImplicitFlowCallback(config, allConfigs, hash).pipe(tap(callbackContext => {\n      if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n        this.router.navigateByUrl(postLoginRoute);\n      }\n    }), catchError(error => {\n      this.flowsDataService.resetSilentRenewRunning(config);\n      this.intervalService.stopPeriodicTokenCheck();\n      if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n        this.router.navigateByUrl(unauthorizedRoute);\n      }\n      return throwError(() => new Error(error));\n    }));\n  }\n}\nImplicitFlowCallbackService.ɵfac = function ImplicitFlowCallbackService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ImplicitFlowCallbackService)(i0.ɵɵinject(FlowsService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(IntervalService));\n};\nImplicitFlowCallbackService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ImplicitFlowCallbackService,\n  factory: ImplicitFlowCallbackService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ImplicitFlowCallbackService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FlowsService\n    }, {\n      type: i2.Router\n    }, {\n      type: FlowsDataService\n    }, {\n      type: IntervalService\n    }];\n  }, null);\n})();\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\nclass SilentRenewService {\n  constructor(iFrameService, flowsService, resetAuthDataService, flowsDataService, authStateService, loggerService, flowHelper, implicitFlowCallbackService, intervalService) {\n    this.iFrameService = iFrameService;\n    this.flowsService = flowsService;\n    this.resetAuthDataService = resetAuthDataService;\n    this.flowsDataService = flowsDataService;\n    this.authStateService = authStateService;\n    this.loggerService = loggerService;\n    this.flowHelper = flowHelper;\n    this.implicitFlowCallbackService = implicitFlowCallbackService;\n    this.intervalService = intervalService;\n    this.refreshSessionWithIFrameCompletedInternal$ = new Subject();\n  }\n  get refreshSessionWithIFrameCompleted$() {\n    return this.refreshSessionWithIFrameCompletedInternal$.asObservable();\n  }\n  getOrCreateIframe(config) {\n    const existingIframe = this.getExistingIframe();\n    if (!existingIframe) {\n      return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER, config);\n    }\n    return existingIframe;\n  }\n  isSilentRenewConfigured(configuration) {\n    const {\n      useRefreshToken,\n      silentRenew\n    } = configuration;\n    return !useRefreshToken && silentRenew;\n  }\n  codeFlowCallbackSilentRenewIframe(urlParts, config, allConfigs) {\n    const params = new HttpParams({\n      fromString: urlParts[1]\n    });\n    const error = params.get('error');\n    if (error) {\n      this.authStateService.updateAndPublishAuthState({\n        isAuthenticated: false,\n        validationResult: ValidationResult.LoginRequired,\n        isRenewProcess: true\n      });\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n      this.flowsDataService.setNonce('', config);\n      this.intervalService.stopPeriodicTokenCheck();\n      return throwError(() => new Error(error));\n    }\n    const code = params.get('code');\n    const state = params.get('state');\n    const sessionState = params.get('session_state');\n    const callbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: true,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null\n    };\n    return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext, config, allConfigs).pipe(catchError(() => {\n      this.intervalService.stopPeriodicTokenCheck();\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n      return throwError(() => new Error(error));\n    }));\n  }\n  silentRenewEventHandler(e, config, allConfigs) {\n    this.loggerService.logDebug(config, 'silentRenewEventHandler');\n    if (!e.detail) {\n      return;\n    }\n    let callback$ = of(null);\n    const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(config);\n    if (isCodeFlow) {\n      const urlParts = e.detail.toString().split('?');\n      callback$ = this.codeFlowCallbackSilentRenewIframe(urlParts, config, allConfigs);\n    } else {\n      callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs, e.detail);\n    }\n    callback$.subscribe({\n      next: callbackContext => {\n        this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);\n        this.flowsDataService.resetSilentRenewRunning(config);\n      },\n      error: err => {\n        this.loggerService.logError(config, 'Error: ' + err);\n        this.refreshSessionWithIFrameCompletedInternal$.next(null);\n        this.flowsDataService.resetSilentRenewRunning(config);\n      }\n    });\n  }\n  getExistingIframe() {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n  }\n}\nSilentRenewService.ɵfac = function SilentRenewService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || SilentRenewService)(i0.ɵɵinject(IFrameService), i0.ɵɵinject(FlowsService), i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(FlowHelper), i0.ɵɵinject(ImplicitFlowCallbackService), i0.ɵɵinject(IntervalService));\n};\nSilentRenewService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SilentRenewService,\n  factory: SilentRenewService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SilentRenewService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: IFrameService\n    }, {\n      type: FlowsService\n    }, {\n      type: ResetAuthDataService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: AuthStateService\n    }, {\n      type: LoggerService\n    }, {\n      type: FlowHelper\n    }, {\n      type: ImplicitFlowCallbackService\n    }, {\n      type: IntervalService\n    }];\n  }, null);\n})();\nclass CodeFlowCallbackService {\n  constructor(flowsService, flowsDataService, intervalService, router) {\n    this.flowsService = flowsService;\n    this.flowsDataService = flowsDataService;\n    this.intervalService = intervalService;\n    this.router = router;\n  }\n  authenticatedCallbackWithCode(urlToCheck, config, allConfigs) {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(config);\n    const {\n      triggerAuthorizationResultEvent,\n      postLoginRoute,\n      unauthorizedRoute\n    } = config;\n    return this.flowsService.processCodeFlowCallback(urlToCheck, config, allConfigs).pipe(tap(callbackContext => {\n      this.flowsDataService.resetCodeFlowInProgress(config);\n      if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n        this.router.navigateByUrl(postLoginRoute);\n      }\n    }), catchError(error => {\n      this.flowsDataService.resetSilentRenewRunning(config);\n      this.flowsDataService.resetCodeFlowInProgress(config);\n      this.intervalService.stopPeriodicTokenCheck();\n      if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n        this.router.navigateByUrl(unauthorizedRoute);\n      }\n      return throwError(() => new Error(error));\n    }));\n  }\n}\nCodeFlowCallbackService.ɵfac = function CodeFlowCallbackService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CodeFlowCallbackService)(i0.ɵɵinject(FlowsService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(IntervalService), i0.ɵɵinject(i2.Router));\n};\nCodeFlowCallbackService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CodeFlowCallbackService,\n  factory: CodeFlowCallbackService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CodeFlowCallbackService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FlowsService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: IntervalService\n    }, {\n      type: i2.Router\n    }];\n  }, null);\n})();\nclass CallbackService {\n  constructor(urlService, flowHelper, implicitFlowCallbackService, codeFlowCallbackService) {\n    this.urlService = urlService;\n    this.flowHelper = flowHelper;\n    this.implicitFlowCallbackService = implicitFlowCallbackService;\n    this.codeFlowCallbackService = codeFlowCallbackService;\n    this.stsCallbackInternal$ = new Subject();\n  }\n  get stsCallback$() {\n    return this.stsCallbackInternal$.asObservable();\n  }\n  isCallback(currentUrl) {\n    return this.urlService.isCallbackFromSts(currentUrl);\n  }\n  handleCallbackAndFireEvents(currentCallbackUrl, config, allConfigs) {\n    let callback$;\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\n      callback$ = this.codeFlowCallbackService.authenticatedCallbackWithCode(currentCallbackUrl, config, allConfigs);\n    } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow(config)) {\n      if (currentCallbackUrl?.includes('#')) {\n        let hash = currentCallbackUrl.substring(currentCallbackUrl.indexOf('#') + 1);\n        callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs, hash);\n      } else {\n        callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs);\n      }\n    }\n    return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\n  }\n}\nCallbackService.ɵfac = function CallbackService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CallbackService)(i0.ɵɵinject(UrlService), i0.ɵɵinject(FlowHelper), i0.ɵɵinject(ImplicitFlowCallbackService), i0.ɵɵinject(CodeFlowCallbackService));\n};\nCallbackService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CallbackService,\n  factory: CallbackService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CallbackService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: UrlService\n    }, {\n      type: FlowHelper\n    }, {\n      type: ImplicitFlowCallbackService\n    }, {\n      type: CodeFlowCallbackService\n    }];\n  }, null);\n})();\nconst WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\nclass AuthWellKnownDataService {\n  constructor(http, loggerService) {\n    this.http = http;\n    this.loggerService = loggerService;\n  }\n  getWellKnownEndPointsForConfig(config) {\n    const {\n      authWellknownEndpointUrl\n    } = config;\n    if (!authWellknownEndpointUrl) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(config, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    return this.getWellKnownDocument(authWellknownEndpointUrl, config).pipe(map(wellKnownEndpoints => ({\n      issuer: wellKnownEndpoints.issuer,\n      jwksUri: wellKnownEndpoints.jwks_uri,\n      authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n      tokenEndpoint: wellKnownEndpoints.token_endpoint,\n      userInfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n      endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n      checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n      revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n      introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n      parEndpoint: wellKnownEndpoints.pushed_authorization_request_endpoint\n    })));\n  }\n  getWellKnownDocument(wellKnownEndpoint, config) {\n    let url = wellKnownEndpoint;\n    if (!wellKnownEndpoint.includes(WELL_KNOWN_SUFFIX)) {\n      url = `${wellKnownEndpoint}${WELL_KNOWN_SUFFIX}`;\n    }\n    return this.http.get(url, config).pipe(retry(2));\n  }\n}\nAuthWellKnownDataService.ɵfac = function AuthWellKnownDataService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AuthWellKnownDataService)(i0.ɵɵinject(DataService), i0.ɵɵinject(LoggerService));\n};\nAuthWellKnownDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthWellKnownDataService,\n  factory: AuthWellKnownDataService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthWellKnownDataService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DataService\n    }, {\n      type: LoggerService\n    }];\n  }, null);\n})();\nclass AuthWellKnownService {\n  constructor(dataService, publicEventsService, storagePersistenceService) {\n    this.dataService = dataService;\n    this.publicEventsService = publicEventsService;\n    this.storagePersistenceService = storagePersistenceService;\n  }\n  storeWellKnownEndpoints(config, mappedWellKnownEndpoints) {\n    this.storagePersistenceService.write('authWellKnownEndPoints', mappedWellKnownEndpoints, config);\n  }\n  queryAndStoreAuthWellKnownEndPoints(config) {\n    const alreadySavedWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\n    if (!!alreadySavedWellKnownEndpoints) {\n      return of(alreadySavedWellKnownEndpoints);\n    }\n    return this.dataService.getWellKnownEndPointsForConfig(config).pipe(tap(mappedWellKnownEndpoints => this.storeWellKnownEndpoints(config, mappedWellKnownEndpoints)), catchError(error => {\n      this.publicEventsService.fireEvent(EventTypes.ConfigLoadingFailed, null);\n      return throwError(() => new Error(error));\n    }));\n  }\n}\nAuthWellKnownService.ɵfac = function AuthWellKnownService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AuthWellKnownService)(i0.ɵɵinject(AuthWellKnownDataService), i0.ɵɵinject(PublicEventsService), i0.ɵɵinject(StoragePersistenceService));\n};\nAuthWellKnownService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthWellKnownService,\n  factory: AuthWellKnownService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthWellKnownService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AuthWellKnownDataService\n    }, {\n      type: PublicEventsService\n    }, {\n      type: StoragePersistenceService\n    }];\n  }, null);\n})();\nclass RefreshSessionIframeService {\n  constructor(document, loggerService, urlService, silentRenewService, rendererFactory) {\n    this.document = document;\n    this.loggerService = loggerService;\n    this.urlService = urlService;\n    this.silentRenewService = silentRenewService;\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n  refreshSessionWithIframe(config, allConfigs, customParams) {\n    this.loggerService.logDebug(config, 'BEGIN refresh session Authorize Iframe renew');\n    return this.urlService.getRefreshSessionSilentRenewUrl(config, customParams).pipe(switchMap(url => {\n      return this.sendAuthorizeRequestUsingSilentRenew(url, config, allConfigs);\n    }));\n  }\n  sendAuthorizeRequestUsingSilentRenew(url, config, allConfigs) {\n    const sessionIframe = this.silentRenewService.getOrCreateIframe(config);\n    this.initSilentRenewRequest(config, allConfigs);\n    this.loggerService.logDebug(config, 'sendAuthorizeRequestUsingSilentRenew for URL:' + url);\n    return new Observable(observer => {\n      const onLoadHandler = () => {\n        sessionIframe.removeEventListener('load', onLoadHandler);\n        this.loggerService.logDebug(config, 'removed event listener from IFrame');\n        observer.next(true);\n        observer.complete();\n      };\n      sessionIframe.addEventListener('load', onLoadHandler);\n      sessionIframe.contentWindow.location.replace(url);\n    });\n  }\n  initSilentRenewRequest(config, allConfigs) {\n    const instanceId = Math.random();\n    const initDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-init', e => {\n      if (e.detail !== instanceId) {\n        initDestroyHandler();\n        renewDestroyHandler();\n      }\n    });\n    const renewDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-message', e => this.silentRenewService.silentRenewEventHandler(e, config, allConfigs));\n    this.document.defaultView.dispatchEvent(new CustomEvent('oidc-silent-renew-init', {\n      detail: instanceId\n    }));\n  }\n}\nRefreshSessionIframeService.ɵfac = function RefreshSessionIframeService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RefreshSessionIframeService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LoggerService), i0.ɵɵinject(UrlService), i0.ɵɵinject(SilentRenewService), i0.ɵɵinject(i0.RendererFactory2));\n};\nRefreshSessionIframeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RefreshSessionIframeService,\n  factory: RefreshSessionIframeService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RefreshSessionIframeService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: LoggerService\n    }, {\n      type: UrlService\n    }, {\n      type: SilentRenewService\n    }, {\n      type: i0.RendererFactory2\n    }];\n  }, null);\n})();\nclass RefreshSessionRefreshTokenService {\n  constructor(loggerService, resetAuthDataService, flowsService, intervalService) {\n    this.loggerService = loggerService;\n    this.resetAuthDataService = resetAuthDataService;\n    this.flowsService = flowsService;\n    this.intervalService = intervalService;\n  }\n  refreshSessionWithRefreshTokens(config, allConfigs, customParamsRefresh) {\n    this.loggerService.logDebug(config, 'BEGIN refresh session Authorize');\n    let refreshTokenFailed = false;\n    return this.flowsService.processRefreshToken(config, allConfigs, customParamsRefresh).pipe(catchError(error => {\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n      refreshTokenFailed = true;\n      return throwError(() => new Error(error));\n    }), finalize(() => refreshTokenFailed && this.intervalService.stopPeriodicTokenCheck()));\n  }\n}\nRefreshSessionRefreshTokenService.ɵfac = function RefreshSessionRefreshTokenService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RefreshSessionRefreshTokenService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(FlowsService), i0.ɵɵinject(IntervalService));\n};\nRefreshSessionRefreshTokenService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RefreshSessionRefreshTokenService,\n  factory: RefreshSessionRefreshTokenService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RefreshSessionRefreshTokenService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: ResetAuthDataService\n    }, {\n      type: FlowsService\n    }, {\n      type: IntervalService\n    }];\n  }, null);\n})();\nconst MAX_RETRY_ATTEMPTS = 3;\nclass RefreshSessionService {\n  constructor(flowHelper, flowsDataService, loggerService, silentRenewService, authStateService, authWellKnownService, refreshSessionIframeService, storagePersistenceService, refreshSessionRefreshTokenService, userService) {\n    this.flowHelper = flowHelper;\n    this.flowsDataService = flowsDataService;\n    this.loggerService = loggerService;\n    this.silentRenewService = silentRenewService;\n    this.authStateService = authStateService;\n    this.authWellKnownService = authWellKnownService;\n    this.refreshSessionIframeService = refreshSessionIframeService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.refreshSessionRefreshTokenService = refreshSessionRefreshTokenService;\n    this.userService = userService;\n  }\n  userForceRefreshSession(config, allConfigs, extraCustomParams) {\n    this.persistCustomParams(extraCustomParams, config);\n    return this.forceRefreshSession(config, allConfigs, extraCustomParams);\n  }\n  forceRefreshSession(config, allConfigs, extraCustomParams) {\n    const {\n      customParamsRefreshTokenRequest,\n      configId\n    } = config;\n    const mergedParams = {\n      ...customParamsRefreshTokenRequest,\n      ...extraCustomParams\n    };\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\n      return this.startRefreshSession(config, allConfigs, mergedParams).pipe(map(() => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);\n        if (isAuthenticated) {\n          return {\n            idToken: this.authStateService.getIdToken(config),\n            accessToken: this.authStateService.getAccessToken(config),\n            userData: this.userService.getUserDataFromStore(config),\n            isAuthenticated,\n            configId\n          };\n        }\n        return null;\n      }));\n    }\n    const {\n      silentRenewTimeoutInSeconds\n    } = config;\n    const timeOutTime = silentRenewTimeoutInSeconds * 1000;\n    return forkJoin([this.startRefreshSession(config, allConfigs, extraCustomParams), this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1))]).pipe(timeout(timeOutTime), retryWhen(this.timeoutRetryStrategy.bind(this)), map(([_, callbackContext]) => {\n      const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);\n      if (isAuthenticated) {\n        return {\n          idToken: callbackContext?.authResult?.id_token,\n          accessToken: callbackContext?.authResult?.access_token,\n          userData: this.userService.getUserDataFromStore(config),\n          isAuthenticated,\n          configId\n        };\n      }\n      return null;\n    }));\n  }\n  persistCustomParams(extraCustomParams, config) {\n    const {\n      useRefreshToken\n    } = config;\n    if (extraCustomParams) {\n      if (useRefreshToken) {\n        this.storagePersistenceService.write('storageCustomParamsRefresh', extraCustomParams, config);\n      } else {\n        this.storagePersistenceService.write('storageCustomParamsAuthRequest', extraCustomParams, config);\n      }\n    }\n  }\n  startRefreshSession(config, allConfigs, extraCustomParams) {\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);\n    this.loggerService.logDebug(config, `Checking: silentRenewRunning: ${isSilentRenewRunning}`);\n    const shouldBeExecuted = !isSilentRenewRunning;\n    if (!shouldBeExecuted) {\n      return of(null);\n    }\n    return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config).pipe(switchMap(() => {\n      this.flowsDataService.setSilentRenewRunning(config);\n      if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\n        // Refresh Session using Refresh tokens\n        return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, extraCustomParams);\n      }\n      return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, extraCustomParams);\n    }));\n  }\n  timeoutRetryStrategy(errorAttempts, config) {\n    return errorAttempts.pipe(mergeMap((error, index) => {\n      const scalingDuration = 1000;\n      const currentAttempt = index + 1;\n      if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {\n        return throwError(() => new Error(error));\n      }\n      this.loggerService.logDebug(config, `forceRefreshSession timeout. Attempt #${currentAttempt}`);\n      this.flowsDataService.resetSilentRenewRunning(config);\n      return timer(currentAttempt * scalingDuration);\n    }));\n  }\n}\nRefreshSessionService.ɵfac = function RefreshSessionService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RefreshSessionService)(i0.ɵɵinject(FlowHelper), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(SilentRenewService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(AuthWellKnownService), i0.ɵɵinject(RefreshSessionIframeService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(RefreshSessionRefreshTokenService), i0.ɵɵinject(UserService));\n};\nRefreshSessionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RefreshSessionService,\n  factory: RefreshSessionService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RefreshSessionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FlowHelper\n    }, {\n      type: FlowsDataService\n    }, {\n      type: LoggerService\n    }, {\n      type: SilentRenewService\n    }, {\n      type: AuthStateService\n    }, {\n      type: AuthWellKnownService\n    }, {\n      type: RefreshSessionIframeService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: RefreshSessionRefreshTokenService\n    }, {\n      type: UserService\n    }];\n  }, null);\n})();\nconst DEFAULT_CONFIG = {\n  authority: 'https://please_set',\n  authWellknownEndpointUrl: '',\n  authWellknownEndpoints: null,\n  redirectUrl: 'https://please_set',\n  clientId: 'please_set',\n  responseType: 'code',\n  scope: 'openid email profile',\n  hdParam: '',\n  postLogoutRedirectUri: 'https://please_set',\n  startCheckSession: false,\n  silentRenew: false,\n  silentRenewUrl: 'https://please_set',\n  silentRenewTimeoutInSeconds: 20,\n  renewTimeBeforeTokenExpiresInSeconds: 0,\n  useRefreshToken: false,\n  usePushedAuthorisationRequests: false,\n  ignoreNonceAfterRefresh: false,\n  postLoginRoute: '/',\n  forbiddenRoute: '/forbidden',\n  unauthorizedRoute: '/unauthorized',\n  autoUserInfo: true,\n  autoCleanStateAfterAuthentication: true,\n  triggerAuthorizationResultEvent: false,\n  logLevel: LogLevel.Warn,\n  issValidationOff: false,\n  historyCleanupOff: false,\n  maxIdTokenIatOffsetAllowedInSeconds: 120,\n  disableIatOffsetValidation: false,\n  customParamsAuthRequest: {},\n  customParamsRefreshTokenRequest: {},\n  customParamsEndSessionRequest: {},\n  customParamsCodeRequest: {},\n  disableRefreshIdTokenAuthTimeValidation: false,\n  triggerRefreshWhenIdTokenExpired: true,\n  tokenRefreshInSeconds: 4,\n  refreshTokenRetryInSeconds: 3,\n  ngswBypass: false\n};\nconst POSITIVE_VALIDATION_RESULT = {\n  result: true,\n  messages: [],\n  level: null\n};\nconst ensureAuthority = passedConfig => {\n  if (!passedConfig.authority) {\n    return {\n      result: false,\n      messages: ['The authority URL MUST be provided in the configuration! '],\n      level: 'error'\n    };\n  }\n  return POSITIVE_VALIDATION_RESULT;\n};\nconst ensureClientId = passedConfig => {\n  if (!passedConfig.clientId) {\n    return {\n      result: false,\n      messages: ['The clientId is required and missing from your config!'],\n      level: 'error'\n    };\n  }\n  return POSITIVE_VALIDATION_RESULT;\n};\nconst createIdentifierToCheck = passedConfig => {\n  if (!passedConfig) {\n    return null;\n  }\n  const {\n    authority,\n    clientId,\n    scope\n  } = passedConfig;\n  return `${authority}${clientId}${scope}`;\n};\nconst arrayHasDuplicates = array => new Set(array).size !== array.length;\nconst ensureNoDuplicatedConfigsRule = passedConfigs => {\n  const allIdentifiers = passedConfigs.map(x => createIdentifierToCheck(x));\n  const someAreNull = allIdentifiers.some(x => x === null);\n  if (someAreNull) {\n    return {\n      result: false,\n      messages: [`Please make sure you add an object with a 'config' property: ....({ config }) instead of ...(config)`],\n      level: 'error'\n    };\n  }\n  const hasDuplicates = arrayHasDuplicates(allIdentifiers);\n  if (hasDuplicates) {\n    return {\n      result: false,\n      messages: ['You added multiple configs with the same authority, clientId and scope'],\n      level: 'warning'\n    };\n  }\n  return POSITIVE_VALIDATION_RESULT;\n};\nconst ensureRedirectRule = passedConfig => {\n  if (!passedConfig.redirectUrl) {\n    return {\n      result: false,\n      messages: ['The redirectUrl is required and missing from your config'],\n      level: 'error'\n    };\n  }\n  return POSITIVE_VALIDATION_RESULT;\n};\nconst ensureSilentRenewUrlWhenNoRefreshTokenUsed = passedConfig => {\n  const usesSilentRenew = passedConfig.silentRenew;\n  const usesRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenewUrl = passedConfig.silentRenewUrl;\n  if (usesSilentRenew && !usesRefreshToken && !hasSilentRenewUrl) {\n    return {\n      result: false,\n      messages: ['Please provide a silent renew URL if using renew and not refresh tokens'],\n      level: 'error'\n    };\n  }\n  return POSITIVE_VALIDATION_RESULT;\n};\nconst useOfflineScopeWithSilentRenew = passedConfig => {\n  const hasRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenew = passedConfig.silentRenew;\n  const scope = passedConfig.scope || '';\n  const hasOfflineScope = scope.split(' ').includes('offline_access');\n  if (hasRefreshToken && hasSilentRenew && !hasOfflineScope) {\n    return {\n      result: false,\n      messages: ['When using silent renew and refresh tokens please set the `offline_access` scope'],\n      level: 'warning'\n    };\n  }\n  return POSITIVE_VALIDATION_RESULT;\n};\nconst allRules = [ensureAuthority, useOfflineScopeWithSilentRenew, ensureRedirectRule, ensureClientId, ensureSilentRenewUrlWhenNoRefreshTokenUsed];\nconst allMultipleConfigRules = [ensureNoDuplicatedConfigsRule];\nclass ConfigValidationService {\n  constructor(loggerService) {\n    this.loggerService = loggerService;\n  }\n  validateConfigs(passedConfigs) {\n    return this.validateConfigsInternal(passedConfigs ?? [], allMultipleConfigRules);\n  }\n  validateConfig(passedConfig) {\n    return this.validateConfigInternal(passedConfig, allRules);\n  }\n  validateConfigsInternal(passedConfigs, allRulesToUse) {\n    const allValidationResults = allRulesToUse.map(rule => rule(passedConfigs));\n    let overallErrorCount = 0;\n    passedConfigs.forEach(passedConfig => {\n      const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);\n      overallErrorCount += errorCount;\n    });\n    return overallErrorCount === 0;\n  }\n  validateConfigInternal(passedConfig, allRulesToUse) {\n    const allValidationResults = allRulesToUse.map(rule => rule(passedConfig));\n    const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);\n    return errorCount === 0;\n  }\n  processValidationResultsAndGetErrorCount(allValidationResults, config) {\n    const allMessages = allValidationResults.filter(x => x.messages.length > 0);\n    const allErrorMessages = this.getAllMessagesOfType('error', allMessages);\n    const allWarnings = this.getAllMessagesOfType('warning', allMessages);\n    allErrorMessages.forEach(message => this.loggerService.logError(config, message));\n    allWarnings.forEach(message => this.loggerService.logWarning(config, message));\n    return allErrorMessages.length;\n  }\n  getAllMessagesOfType(type, results) {\n    const allMessages = results.filter(x => x.level === type).map(result => result.messages);\n    return allMessages.reduce((acc, val) => acc.concat(val), []);\n  }\n}\nConfigValidationService.ɵfac = function ConfigValidationService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ConfigValidationService)(i0.ɵɵinject(LoggerService));\n};\nConfigValidationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConfigValidationService,\n  factory: ConfigValidationService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConfigValidationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }];\n  }, null);\n})();\nclass PlatformProvider {\n  constructor(platformId) {\n    this.platformId = platformId;\n  }\n  isBrowser() {\n    return isPlatformBrowser(this.platformId);\n  }\n}\nPlatformProvider.ɵfac = function PlatformProvider_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || PlatformProvider)(i0.ɵɵinject(PLATFORM_ID));\n};\nPlatformProvider.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PlatformProvider,\n  factory: PlatformProvider.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PlatformProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\nclass OpenIdConfigLoader {}\nclass StsConfigLoader {}\nclass StsConfigStaticLoader {\n  constructor(passedConfigs) {\n    this.passedConfigs = passedConfigs;\n  }\n  loadConfigs() {\n    if (Array.isArray(this.passedConfigs)) {\n      return of(this.passedConfigs);\n    }\n    return of([this.passedConfigs]);\n  }\n}\nclass StsConfigHttpLoader {\n  constructor(configs$) {\n    this.configs$ = configs$;\n  }\n  loadConfigs() {\n    if (Array.isArray(this.configs$)) {\n      return forkJoin(this.configs$);\n    }\n    const singleConfigOrArray = this.configs$;\n    return singleConfigOrArray.pipe(map(value => {\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    }));\n  }\n}\nclass ConfigurationService {\n  constructor(loggerService, publicEventsService, storagePersistenceService, configValidationService, platformProvider, authWellKnownService, loader) {\n    this.loggerService = loggerService;\n    this.publicEventsService = publicEventsService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.configValidationService = configValidationService;\n    this.platformProvider = platformProvider;\n    this.authWellKnownService = authWellKnownService;\n    this.loader = loader;\n    this.configsInternal = {};\n  }\n  hasManyConfigs() {\n    return Object.keys(this.configsInternal).length > 1;\n  }\n  getAllConfigurations() {\n    return Object.values(this.configsInternal);\n  }\n  getOpenIDConfiguration(configId) {\n    if (this.configsAlreadySaved()) {\n      return of(this.getConfig(configId));\n    }\n    return this.getOpenIDConfigurations(configId).pipe(map(result => result.currentConfig));\n  }\n  getOpenIDConfigurations(configId) {\n    return this.loadConfigs().pipe(concatMap(allConfigs => this.prepareAndSaveConfigs(allConfigs)), map(allPreparedConfigs => ({\n      allConfigs: allPreparedConfigs,\n      currentConfig: this.getConfig(configId)\n    })));\n  }\n  hasAtLeastOneConfig() {\n    return Object.keys(this.configsInternal).length > 0;\n  }\n  saveConfig(readyConfig) {\n    const {\n      configId\n    } = readyConfig;\n    this.configsInternal[configId] = readyConfig;\n  }\n  loadConfigs() {\n    return this.loader.loadConfigs();\n  }\n  configsAlreadySaved() {\n    return this.hasAtLeastOneConfig();\n  }\n  getConfig(configId) {\n    if (!!configId) {\n      return this.configsInternal[configId] || null;\n    }\n    const [, value] = Object.entries(this.configsInternal)[0] || [[null, null]];\n    return value || null;\n  }\n  prepareAndSaveConfigs(passedConfigs) {\n    if (!this.configValidationService.validateConfigs(passedConfigs)) {\n      return of(null);\n    }\n    this.createUniqueIds(passedConfigs);\n    const allHandleConfigs$ = passedConfigs.map(x => this.handleConfig(x));\n    return forkJoin(allHandleConfigs$);\n  }\n  createUniqueIds(passedConfigs) {\n    passedConfigs.forEach((config, index) => {\n      if (!config.configId) {\n        config.configId = `${index}-${config.clientId}`;\n      }\n    });\n  }\n  handleConfig(passedConfig) {\n    if (!this.configValidationService.validateConfig(passedConfig)) {\n      this.loggerService.logError(passedConfig, 'Validation of config rejected with errors. Config is NOT set.');\n      return of(null);\n    }\n    if (!passedConfig.authWellknownEndpointUrl) {\n      passedConfig.authWellknownEndpointUrl = passedConfig.authority;\n    }\n    const usedConfig = this.prepareConfig(passedConfig);\n    this.saveConfig(usedConfig);\n    const configWithAuthWellKnown = this.enhanceConfigWithWellKnownEndpoint(usedConfig);\n    this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, configWithAuthWellKnown);\n    return of(usedConfig);\n  }\n  enhanceConfigWithWellKnownEndpoint(configuration) {\n    const alreadyExistingAuthWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    if (!!alreadyExistingAuthWellKnownEndpoints) {\n      configuration.authWellknownEndpoints = alreadyExistingAuthWellKnownEndpoints;\n      return configuration;\n    }\n    const passedAuthWellKnownEndpoints = configuration.authWellknownEndpoints;\n    if (!!passedAuthWellKnownEndpoints) {\n      this.authWellKnownService.storeWellKnownEndpoints(configuration, passedAuthWellKnownEndpoints);\n      configuration.authWellknownEndpoints = passedAuthWellKnownEndpoints;\n      return configuration;\n    }\n    return configuration;\n  }\n  prepareConfig(configuration) {\n    const openIdConfigurationInternal = {\n      ...DEFAULT_CONFIG,\n      ...configuration\n    };\n    this.setSpecialCases(openIdConfigurationInternal);\n    return openIdConfigurationInternal;\n  }\n  setSpecialCases(currentConfig) {\n    if (!this.platformProvider.isBrowser()) {\n      currentConfig.startCheckSession = false;\n      currentConfig.silentRenew = false;\n      currentConfig.useRefreshToken = false;\n      currentConfig.usePushedAuthorisationRequests = false;\n    }\n  }\n}\nConfigurationService.ɵfac = function ConfigurationService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ConfigurationService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(PublicEventsService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(ConfigValidationService), i0.ɵɵinject(PlatformProvider), i0.ɵɵinject(AuthWellKnownService), i0.ɵɵinject(StsConfigLoader));\n};\nConfigurationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConfigurationService,\n  factory: ConfigurationService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConfigurationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: PublicEventsService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: ConfigValidationService\n    }, {\n      type: PlatformProvider\n    }, {\n      type: AuthWellKnownService\n    }, {\n      type: StsConfigLoader\n    }];\n  }, null);\n})();\nclass PeriodicallyTokenCheckService {\n  constructor(resetAuthDataService, flowHelper, flowsDataService, loggerService, userService, authStateService, refreshSessionIframeService, refreshSessionRefreshTokenService, intervalService, storagePersistenceService, publicEventsService, configurationService) {\n    this.resetAuthDataService = resetAuthDataService;\n    this.flowHelper = flowHelper;\n    this.flowsDataService = flowsDataService;\n    this.loggerService = loggerService;\n    this.userService = userService;\n    this.authStateService = authStateService;\n    this.refreshSessionIframeService = refreshSessionIframeService;\n    this.refreshSessionRefreshTokenService = refreshSessionRefreshTokenService;\n    this.intervalService = intervalService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.publicEventsService = publicEventsService;\n    this.configurationService = configurationService;\n  }\n  startTokenValidationPeriodically(allConfigs, currentConfig) {\n    const configsWithSilentRenewEnabled = this.getConfigsWithSilentRenewEnabled(allConfigs);\n    if (configsWithSilentRenewEnabled.length <= 0) {\n      return;\n    }\n    if (this.intervalService.isTokenValidationRunning()) {\n      return;\n    }\n    const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled);\n    const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(refreshTimeInSeconds).pipe(switchMap(() => {\n      const objectWithConfigIdsAndRefreshEvent = {};\n      configsWithSilentRenewEnabled.forEach(config => {\n        objectWithConfigIdsAndRefreshEvent[config.configId] = this.getRefreshEvent(config, allConfigs);\n      });\n      return forkJoin(objectWithConfigIdsAndRefreshEvent);\n    }));\n    this.intervalService.runTokenValidationRunning = periodicallyCheck$.pipe(catchError(error => throwError(() => new Error(error)))).subscribe({\n      next: objectWithConfigIds => {\n        for (const [configId, _] of Object.entries(objectWithConfigIds)) {\n          this.configurationService.getOpenIDConfiguration(configId).subscribe(config => {\n            this.loggerService.logDebug(config, 'silent renew, periodic check finished!');\n            if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\n              this.flowsDataService.resetSilentRenewRunning(config);\n            }\n          });\n        }\n      },\n      error: error => {\n        this.loggerService.logError(currentConfig, 'silent renew failed!', error);\n      }\n    });\n  }\n  getRefreshEvent(config, allConfigs) {\n    const shouldStartRefreshEvent = this.shouldStartPeriodicallyCheckForConfig(config);\n    if (!shouldStartRefreshEvent) {\n      return of(null);\n    }\n    const refreshEvent$ = this.createRefreshEventForConfig(config, allConfigs);\n    this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);\n    const refreshEventWithErrorHandler$ = refreshEvent$.pipe(catchError(error => {\n      this.loggerService.logError(config, 'silent renew failed!', error);\n      this.publicEventsService.fireEvent(EventTypes.SilentRenewFailed, error);\n      this.flowsDataService.resetSilentRenewRunning(config);\n      return throwError(() => new Error(error));\n    }));\n    return refreshEventWithErrorHandler$;\n  }\n  getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled) {\n    const result = configsWithSilentRenewEnabled.reduce((prev, curr) => prev.tokenRefreshInSeconds < curr.tokenRefreshInSeconds ? prev : curr);\n    return result.tokenRefreshInSeconds;\n  }\n  getConfigsWithSilentRenewEnabled(allConfigs) {\n    return allConfigs.filter(x => x.silentRenew);\n  }\n  createRefreshEventForConfig(configuration, allConfigs) {\n    this.loggerService.logDebug(configuration, 'starting silent renew...');\n    return this.configurationService.getOpenIDConfiguration(configuration.configId).pipe(switchMap(config => {\n      if (!config?.silentRenew) {\n        this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n        return of(null);\n      }\n      this.flowsDataService.setSilentRenewRunning(config);\n      if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\n        // Retrieve Dynamically Set Custom Params for refresh body\n        const customParamsRefresh = this.storagePersistenceService.read('storageCustomParamsRefresh', config) || {};\n        const {\n          customParamsRefreshTokenRequest\n        } = config;\n        const mergedParams = {\n          ...customParamsRefreshTokenRequest,\n          ...customParamsRefresh\n        };\n        // Refresh Session using Refresh tokens\n        return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, mergedParams);\n      }\n      // Retrieve Dynamically Set Custom Params\n      const customParams = this.storagePersistenceService.read('storageCustomParamsAuthRequest', config);\n      return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, customParams);\n    }));\n  }\n  shouldStartPeriodicallyCheckForConfig(config) {\n    const idToken = this.authStateService.getIdToken(config);\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);\n    const isCodeFlowinProgress = this.flowsDataService.isCodeFlowInProgress(config);\n    const userDataFromStore = this.userService.getUserDataFromStore(config);\n    this.loggerService.logDebug(config, `Checking: silentRenewRunning: ${isSilentRenewRunning}, isCodeFlowInProgress: ${isCodeFlowinProgress} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`);\n    const shouldBeExecuted = !!userDataFromStore && !isSilentRenewRunning && !!idToken && !isCodeFlowinProgress;\n    if (!shouldBeExecuted) {\n      return false;\n    }\n    const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists(config);\n    if (!accessTokenHasExpired) {\n      return false;\n    }\n    return true;\n  }\n}\nPeriodicallyTokenCheckService.ɵfac = function PeriodicallyTokenCheckService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || PeriodicallyTokenCheckService)(i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(FlowHelper), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(UserService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(RefreshSessionIframeService), i0.ɵɵinject(RefreshSessionRefreshTokenService), i0.ɵɵinject(IntervalService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(PublicEventsService), i0.ɵɵinject(ConfigurationService));\n};\nPeriodicallyTokenCheckService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PeriodicallyTokenCheckService,\n  factory: PeriodicallyTokenCheckService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PeriodicallyTokenCheckService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ResetAuthDataService\n    }, {\n      type: FlowHelper\n    }, {\n      type: FlowsDataService\n    }, {\n      type: LoggerService\n    }, {\n      type: UserService\n    }, {\n      type: AuthStateService\n    }, {\n      type: RefreshSessionIframeService\n    }, {\n      type: RefreshSessionRefreshTokenService\n    }, {\n      type: IntervalService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: PublicEventsService\n    }, {\n      type: ConfigurationService\n    }];\n  }, null);\n})();\nclass PopUpService {\n  constructor(document, loggerService, storagePersistenceService) {\n    this.document = document;\n    this.loggerService = loggerService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.STORAGE_IDENTIFIER = 'popupauth';\n    this.resultInternal$ = new Subject();\n  }\n  get result$() {\n    return this.resultInternal$.asObservable();\n  }\n  get windowInternal() {\n    return this.document.defaultView;\n  }\n  currentWindowIsPopUp() {\n    return !!this.windowInternal.opener && this.windowInternal.opener !== this.windowInternal;\n  }\n  isCurrentlyInPopup(config) {\n    if (this.canAccessSessionStorage()) {\n      const mainWindowHasPopupOpen = this.mainWindowHasPopupOpen(config);\n      const currentWindowIsPopup = this.currentWindowIsPopUp();\n      return mainWindowHasPopupOpen || currentWindowIsPopup;\n    }\n    return false;\n  }\n  openPopUp(url, popupOptions, config) {\n    const optionsToPass = this.getOptions(popupOptions);\n    this.popUp = this.windowInternal.open(url, '_blank', optionsToPass);\n    if (!this.popUp) {\n      this.loggerService.logError(config, 'Could not open popup');\n      return;\n    }\n    this.storagePersistenceService.write(this.STORAGE_IDENTIFIER, 'true', config);\n    const listener = event => {\n      if (!event?.data || typeof event.data !== 'string') {\n        this.cleanUp(listener, config);\n        return;\n      }\n      this.resultInternal$.next({\n        userClosed: false,\n        receivedUrl: event.data\n      });\n      this.cleanUp(listener, config);\n    };\n    this.windowInternal.addEventListener('message', listener, false);\n    this.handle = this.windowInternal.setInterval(() => {\n      if (this.popUp?.closed) {\n        this.resultInternal$.next({\n          userClosed: true\n        });\n        this.cleanUp(listener, config);\n      }\n    }, 200);\n  }\n  sendMessageToMainWindow(url) {\n    if (this.windowInternal.opener) {\n      const href = this.windowInternal.location.href;\n      this.sendMessage(url, href);\n    }\n  }\n  cleanUp(listener, config) {\n    this.windowInternal.removeEventListener('message', listener, false);\n    this.windowInternal.clearInterval(this.handle);\n    if (this.popUp) {\n      this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);\n      this.popUp.close();\n      this.popUp = null;\n    }\n  }\n  sendMessage(url, href) {\n    this.windowInternal.opener.postMessage(url, href);\n  }\n  getOptions(popupOptions) {\n    const popupDefaultOptions = {\n      width: 500,\n      height: 500,\n      left: 50,\n      top: 50\n    };\n    const options = {\n      ...popupDefaultOptions,\n      ...(popupOptions || {})\n    };\n    const left = this.windowInternal.screenLeft + (this.windowInternal.outerWidth - options.width) / 2;\n    const top = this.windowInternal.screenTop + (this.windowInternal.outerHeight - options.height) / 2;\n    options.left = left;\n    options.top = top;\n    return Object.entries(options).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join(',');\n  }\n  mainWindowHasPopupOpen(config) {\n    return !!this.storagePersistenceService.read(this.STORAGE_IDENTIFIER, config);\n  }\n  canAccessSessionStorage() {\n    return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';\n  }\n}\nPopUpService.ɵfac = function PopUpService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || PopUpService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(LoggerService), i0.ɵɵinject(StoragePersistenceService));\n};\nPopUpService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PopUpService,\n  factory: PopUpService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopUpService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: LoggerService\n    }, {\n      type: StoragePersistenceService\n    }];\n  }, null);\n})();\nconst STORAGE_KEY = 'redirect';\nclass AutoLoginService {\n  constructor(storageService, router) {\n    this.storageService = storageService;\n    this.router = router;\n  }\n  checkSavedRedirectRouteAndNavigate(config) {\n    const savedRouteForRedirect = this.getStoredRedirectRoute(config);\n    if (savedRouteForRedirect) {\n      this.deleteStoredRedirectRoute(config);\n      this.router.navigateByUrl(savedRouteForRedirect);\n    }\n  }\n  /**\r\n   * Saves the redirect URL to storage.\r\n   *\r\n   * @param url The redirect URL to save.\r\n   */\n  saveRedirectRoute(config, url) {\n    this.storageService.write(STORAGE_KEY, url, config);\n  }\n  /**\r\n   * Gets the stored redirect URL from storage.\r\n   */\n  getStoredRedirectRoute(config) {\n    return this.storageService.read(STORAGE_KEY, config);\n  }\n  /**\r\n   * Removes the redirect URL from storage.\r\n   */\n  deleteStoredRedirectRoute(config) {\n    this.storageService.remove(STORAGE_KEY, config);\n  }\n}\nAutoLoginService.ɵfac = function AutoLoginService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AutoLoginService)(i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(i2.Router));\n};\nAutoLoginService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AutoLoginService,\n  factory: AutoLoginService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutoLoginService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StoragePersistenceService\n    }, {\n      type: i2.Router\n    }];\n  }, null);\n})();\nclass CheckAuthService {\n  constructor(checkSessionService, currentUrlService, silentRenewService, userService, loggerService, authStateService, callbackService, refreshSessionService, periodicallyTokenCheckService, popupService, autoLoginService, storagePersistenceService, publicEventsService) {\n    this.checkSessionService = checkSessionService;\n    this.currentUrlService = currentUrlService;\n    this.silentRenewService = silentRenewService;\n    this.userService = userService;\n    this.loggerService = loggerService;\n    this.authStateService = authStateService;\n    this.callbackService = callbackService;\n    this.refreshSessionService = refreshSessionService;\n    this.periodicallyTokenCheckService = periodicallyTokenCheckService;\n    this.popupService = popupService;\n    this.autoLoginService = autoLoginService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.publicEventsService = publicEventsService;\n  }\n  checkAuth(configuration, allConfigs, url) {\n    this.publicEventsService.fireEvent(EventTypes.CheckingAuth);\n    const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl(url);\n    if (!!stateParamFromUrl) {\n      configuration = this.getConfigurationWithUrlState([configuration], stateParamFromUrl);\n      if (!configuration) {\n        return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));\n      }\n    }\n    return this.checkAuthWithConfig(configuration, allConfigs, url);\n  }\n  checkAuthMultiple(allConfigs, url) {\n    const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl(url);\n    if (stateParamFromUrl) {\n      const config = this.getConfigurationWithUrlState(allConfigs, stateParamFromUrl);\n      if (!config) {\n        return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));\n      }\n      return this.composeMultipleLoginResults(allConfigs, config, url);\n    }\n    const configs = allConfigs;\n    const allChecks$ = configs.map(x => this.checkAuthWithConfig(x, configs, url));\n    return forkJoin(allChecks$);\n  }\n  checkAuthIncludingServer(configuration, allConfigs) {\n    return this.checkAuthWithConfig(configuration, allConfigs).pipe(switchMap(loginResponse => {\n      const {\n        isAuthenticated\n      } = loginResponse;\n      if (isAuthenticated) {\n        return of(loginResponse);\n      }\n      return this.refreshSessionService.forceRefreshSession(configuration, allConfigs).pipe(tap(loginResponseAfterRefreshSession => {\n        if (loginResponseAfterRefreshSession?.isAuthenticated) {\n          this.startCheckSessionAndValidation(configuration, allConfigs);\n        }\n      }));\n    }));\n  }\n  checkAuthWithConfig(config, allConfigs, url) {\n    if (!config) {\n      const errorMessage = 'Please provide at least one configuration before setting up the module';\n      this.loggerService.logError(config, errorMessage);\n      return of({\n        isAuthenticated: false,\n        errorMessage,\n        userData: null,\n        idToken: null,\n        accessToken: null,\n        configId: null\n      });\n    }\n    const currentUrl = url || this.currentUrlService.getCurrentUrl();\n    const {\n      configId,\n      authority\n    } = config;\n    this.loggerService.logDebug(config, `Working with config '${configId}' using ${authority}`);\n    if (this.popupService.currentWindowIsPopUp()) {\n      this.popupService.sendMessageToMainWindow(currentUrl);\n      return of(null);\n    }\n    const isCallback = this.callbackService.isCallback(currentUrl);\n    this.loggerService.logDebug(config, 'currentUrl to check auth with: ', currentUrl);\n    const callback$ = isCallback ? this.callbackService.handleCallbackAndFireEvents(currentUrl, config, allConfigs) : of(null);\n    return callback$.pipe(map(() => {\n      const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);\n      if (isAuthenticated) {\n        this.startCheckSessionAndValidation(config, allConfigs);\n        if (!isCallback) {\n          this.authStateService.setAuthenticatedAndFireEvent(allConfigs);\n          this.userService.publishUserDataIfExists(config, allConfigs);\n        }\n      }\n      this.loggerService.logDebug(config, 'checkAuth completed - firing events now. isAuthenticated: ' + isAuthenticated);\n      return {\n        isAuthenticated,\n        userData: this.userService.getUserDataFromStore(config),\n        accessToken: this.authStateService.getAccessToken(config),\n        idToken: this.authStateService.getIdToken(config),\n        configId\n      };\n    }), tap(({\n      isAuthenticated\n    }) => {\n      this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinished);\n      if (isAuthenticated) {\n        this.autoLoginService.checkSavedRedirectRouteAndNavigate(config);\n      }\n    }), catchError(({\n      message\n    }) => {\n      this.loggerService.logError(config, message);\n      this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinishedWithError, message);\n      return of({\n        isAuthenticated: false,\n        errorMessage: message,\n        userData: null,\n        idToken: null,\n        accessToken: null,\n        configId\n      });\n    }));\n  }\n  startCheckSessionAndValidation(config, allConfigs) {\n    if (this.checkSessionService.isCheckSessionConfigured(config)) {\n      this.checkSessionService.start(config);\n    }\n    this.periodicallyTokenCheckService.startTokenValidationPeriodically(allConfigs, config);\n    if (this.silentRenewService.isSilentRenewConfigured(config)) {\n      this.silentRenewService.getOrCreateIframe(config);\n    }\n  }\n  getConfigurationWithUrlState(configurations, stateFromUrl) {\n    for (const config of configurations) {\n      const storedState = this.storagePersistenceService.read('authStateControl', config);\n      if (storedState === stateFromUrl) {\n        return config;\n      }\n    }\n    return null;\n  }\n  composeMultipleLoginResults(configurations, activeConfig, url) {\n    const allOtherConfigs = configurations.filter(x => x.configId !== activeConfig.configId);\n    const currentConfigResult = this.checkAuthWithConfig(activeConfig, configurations, url);\n    const allOtherConfigResults = allOtherConfigs.map(config => {\n      const {\n        redirectUrl\n      } = config;\n      return this.checkAuthWithConfig(config, configurations, redirectUrl);\n    });\n    return forkJoin([currentConfigResult, ...allOtherConfigResults]);\n  }\n}\nCheckAuthService.ɵfac = function CheckAuthService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || CheckAuthService)(i0.ɵɵinject(CheckSessionService), i0.ɵɵinject(CurrentUrlService), i0.ɵɵinject(SilentRenewService), i0.ɵɵinject(UserService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(CallbackService), i0.ɵɵinject(RefreshSessionService), i0.ɵɵinject(PeriodicallyTokenCheckService), i0.ɵɵinject(PopUpService), i0.ɵɵinject(AutoLoginService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(PublicEventsService));\n};\nCheckAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CheckAuthService,\n  factory: CheckAuthService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CheckAuthService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CheckSessionService\n    }, {\n      type: CurrentUrlService\n    }, {\n      type: SilentRenewService\n    }, {\n      type: UserService\n    }, {\n      type: LoggerService\n    }, {\n      type: AuthStateService\n    }, {\n      type: CallbackService\n    }, {\n      type: RefreshSessionService\n    }, {\n      type: PeriodicallyTokenCheckService\n    }, {\n      type: PopUpService\n    }, {\n      type: AutoLoginService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: PublicEventsService\n    }];\n  }, null);\n})();\nclass ClosestMatchingRouteService {\n  getConfigIdForClosestMatchingRoute(route, configurations) {\n    for (const config of configurations) {\n      const {\n        secureRoutes\n      } = config;\n      for (const configuredRoute of secureRoutes) {\n        if (route.startsWith(configuredRoute)) {\n          return {\n            matchingRoute: configuredRoute,\n            matchingConfig: config\n          };\n        }\n      }\n    }\n    return {\n      matchingRoute: null,\n      matchingConfig: null\n    };\n  }\n}\nClosestMatchingRouteService.ɵfac = function ClosestMatchingRouteService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ClosestMatchingRouteService)();\n};\nClosestMatchingRouteService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ClosestMatchingRouteService,\n  factory: ClosestMatchingRouteService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClosestMatchingRouteService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass ConsoleLoggerService {\n  logError(message, ...args) {\n    console.error(message, ...args);\n  }\n  logWarning(message, ...args) {\n    console.warn(message, ...args);\n  }\n  logDebug(message, ...args) {\n    console.debug(message, ...args);\n  }\n}\nConsoleLoggerService.ɵfac = function ConsoleLoggerService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ConsoleLoggerService)();\n};\nConsoleLoggerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ConsoleLoggerService,\n  factory: ConsoleLoggerService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConsoleLoggerService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass ResponseTypeValidationService {\n  constructor(loggerService, flowHelper) {\n    this.loggerService = loggerService;\n    this.flowHelper = flowHelper;\n  }\n  hasConfigValidResponseType(configuration) {\n    if (this.flowHelper.isCurrentFlowAnyImplicitFlow(configuration)) {\n      return true;\n    }\n    if (this.flowHelper.isCurrentFlowCodeFlow(configuration)) {\n      return true;\n    }\n    this.loggerService.logWarning(configuration, 'module configured incorrectly, invalid response_type. Check the responseType in the config');\n    return false;\n  }\n}\nResponseTypeValidationService.ɵfac = function ResponseTypeValidationService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ResponseTypeValidationService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(FlowHelper));\n};\nResponseTypeValidationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ResponseTypeValidationService,\n  factory: ResponseTypeValidationService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResponseTypeValidationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: FlowHelper\n    }];\n  }, null);\n})();\nclass RedirectService {\n  constructor(document) {\n    this.document = document;\n  }\n  redirectTo(url) {\n    this.document.location.href = url;\n  }\n}\nRedirectService.ɵfac = function RedirectService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || RedirectService)(i0.ɵɵinject(DOCUMENT));\n};\nRedirectService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RedirectService,\n  factory: RedirectService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RedirectService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass ParService {\n  constructor(loggerService, urlService, dataService, storagePersistenceService) {\n    this.loggerService = loggerService;\n    this.urlService = urlService;\n    this.dataService = dataService;\n    this.storagePersistenceService = storagePersistenceService;\n  }\n  postParRequest(configuration, customParams) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n    const authWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\n    if (!authWellKnownEndpoints) {\n      return throwError(() => new Error('Could not read PAR endpoint because authWellKnownEndPoints are not given'));\n    }\n    const parEndpoint = authWellKnownEndpoints.parEndpoint;\n    if (!parEndpoint) {\n      return throwError(() => new Error('Could not read PAR endpoint from authWellKnownEndpoints'));\n    }\n    return this.urlService.createBodyForParCodeFlowRequest(configuration, customParams).pipe(switchMap(data => {\n      return this.dataService.post(parEndpoint, data, configuration, headers).pipe(retry(2), map(response => {\n        this.loggerService.logDebug(configuration, 'par response: ', response);\n        return {\n          expiresIn: response.expires_in,\n          requestUri: response.request_uri\n        };\n      }), catchError(error => {\n        const errorMessage = `There was an error on ParService postParRequest`;\n        this.loggerService.logError(configuration, errorMessage, error);\n        return throwError(() => new Error(errorMessage));\n      }));\n    }));\n  }\n}\nParService.ɵfac = function ParService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ParService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(UrlService), i0.ɵɵinject(DataService), i0.ɵɵinject(StoragePersistenceService));\n};\nParService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ParService,\n  factory: ParService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ParService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: UrlService\n    }, {\n      type: DataService\n    }, {\n      type: StoragePersistenceService\n    }];\n  }, null);\n})();\nclass ParLoginService {\n  constructor(loggerService, responseTypeValidationService, urlService, redirectService, authWellKnownService, popupService, checkAuthService, parService) {\n    this.loggerService = loggerService;\n    this.responseTypeValidationService = responseTypeValidationService;\n    this.urlService = urlService;\n    this.redirectService = redirectService;\n    this.authWellKnownService = authWellKnownService;\n    this.popupService = popupService;\n    this.checkAuthService = checkAuthService;\n    this.parService = parService;\n  }\n  loginPar(configuration, authOptions) {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\n      this.loggerService.logError(configuration, 'Invalid response type!');\n      return;\n    }\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow, no auth data');\n    const {\n      urlHandler,\n      customParams\n    } = authOptions || {};\n    this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).pipe(switchMap(() => this.parService.postParRequest(configuration, customParams))).subscribe(response => {\n      this.loggerService.logDebug(configuration, 'par response: ', response);\n      const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);\n      this.loggerService.logDebug(configuration, 'par request url: ', url);\n      if (!url) {\n        this.loggerService.logError(configuration, `Could not create URL with param ${response.requestUri}: '${url}'`);\n        return;\n      }\n      if (urlHandler) {\n        urlHandler(url);\n      } else {\n        this.redirectService.redirectTo(url);\n      }\n    });\n  }\n  loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions) {\n    const {\n      configId\n    } = configuration;\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(configuration, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow with popup, no auth data');\n    const {\n      customParams\n    } = authOptions || {};\n    return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).pipe(switchMap(() => this.parService.postParRequest(configuration, customParams)), switchMap(response => {\n      this.loggerService.logDebug(configuration, 'par response: ', response);\n      const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);\n      this.loggerService.logDebug(configuration, 'par request url: ', url);\n      if (!url) {\n        const errorMessage = `Could not create URL with param ${response.requestUri}: 'url'`;\n        this.loggerService.logError(configuration, errorMessage);\n        return throwError(() => new Error(errorMessage));\n      }\n      this.popupService.openPopUp(url, popupOptions, configuration);\n      return this.popupService.result$.pipe(take(1), switchMap(result => {\n        const {\n          userClosed,\n          receivedUrl\n        } = result;\n        if (userClosed) {\n          return of({\n            isAuthenticated: false,\n            errorMessage: 'User closed popup',\n            userData: null,\n            idToken: null,\n            accessToken: null,\n            configId\n          });\n        }\n        return this.checkAuthService.checkAuth(configuration, allConfigs, receivedUrl);\n      }));\n    }));\n  }\n}\nParLoginService.ɵfac = function ParLoginService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ParLoginService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(ResponseTypeValidationService), i0.ɵɵinject(UrlService), i0.ɵɵinject(RedirectService), i0.ɵɵinject(AuthWellKnownService), i0.ɵɵinject(PopUpService), i0.ɵɵinject(CheckAuthService), i0.ɵɵinject(ParService));\n};\nParLoginService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ParLoginService,\n  factory: ParLoginService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ParLoginService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: ResponseTypeValidationService\n    }, {\n      type: UrlService\n    }, {\n      type: RedirectService\n    }, {\n      type: AuthWellKnownService\n    }, {\n      type: PopUpService\n    }, {\n      type: CheckAuthService\n    }, {\n      type: ParService\n    }];\n  }, null);\n})();\nclass PopUpLoginService {\n  constructor(loggerService, responseTypeValidationService, urlService, authWellKnownService, popupService, checkAuthService) {\n    this.loggerService = loggerService;\n    this.responseTypeValidationService = responseTypeValidationService;\n    this.urlService = urlService;\n    this.authWellKnownService = authWellKnownService;\n    this.popupService = popupService;\n    this.checkAuthService = checkAuthService;\n  }\n  loginWithPopUpStandard(configuration, allConfigs, authOptions, popupOptions) {\n    const {\n      configId\n    } = configuration;\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(configuration, errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow with popup, no auth data');\n    return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).pipe(switchMap(() => this.urlService.getAuthorizeUrl(configuration, authOptions)), tap(authUrl => this.popupService.openPopUp(authUrl, popupOptions, configuration)), switchMap(() => {\n      return this.popupService.result$.pipe(take(1), switchMap(result => {\n        const {\n          userClosed,\n          receivedUrl\n        } = result;\n        if (userClosed) {\n          return of({\n            isAuthenticated: false,\n            errorMessage: 'User closed popup',\n            userData: null,\n            idToken: null,\n            accessToken: null,\n            configId\n          });\n        }\n        return this.checkAuthService.checkAuth(configuration, allConfigs, receivedUrl);\n      }));\n    }));\n  }\n}\nPopUpLoginService.ɵfac = function PopUpLoginService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || PopUpLoginService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(ResponseTypeValidationService), i0.ɵɵinject(UrlService), i0.ɵɵinject(AuthWellKnownService), i0.ɵɵinject(PopUpService), i0.ɵɵinject(CheckAuthService));\n};\nPopUpLoginService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PopUpLoginService,\n  factory: PopUpLoginService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopUpLoginService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: ResponseTypeValidationService\n    }, {\n      type: UrlService\n    }, {\n      type: AuthWellKnownService\n    }, {\n      type: PopUpService\n    }, {\n      type: CheckAuthService\n    }];\n  }, null);\n})();\nclass StandardLoginService {\n  constructor(loggerService, responseTypeValidationService, urlService, redirectService, authWellKnownService, flowsDataService) {\n    this.loggerService = loggerService;\n    this.responseTypeValidationService = responseTypeValidationService;\n    this.urlService = urlService;\n    this.redirectService = redirectService;\n    this.authWellKnownService = authWellKnownService;\n    this.flowsDataService = flowsDataService;\n  }\n  loginStandard(configuration, authOptions) {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\n      this.loggerService.logError(configuration, 'Invalid response type!');\n      return;\n    }\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow, no auth data');\n    this.flowsDataService.setCodeFlowInProgress(configuration);\n    this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).subscribe(() => {\n      const {\n        urlHandler\n      } = authOptions || {};\n      this.flowsDataService.resetSilentRenewRunning(configuration);\n      this.urlService.getAuthorizeUrl(configuration, authOptions).subscribe(url => {\n        if (!url) {\n          this.loggerService.logError(configuration, 'Could not create URL', url);\n          return;\n        }\n        if (urlHandler) {\n          urlHandler(url);\n        } else {\n          this.redirectService.redirectTo(url);\n        }\n      });\n    });\n  }\n}\nStandardLoginService.ɵfac = function StandardLoginService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || StandardLoginService)(i0.ɵɵinject(LoggerService), i0.ɵɵinject(ResponseTypeValidationService), i0.ɵɵinject(UrlService), i0.ɵɵinject(RedirectService), i0.ɵɵinject(AuthWellKnownService), i0.ɵɵinject(FlowsDataService));\n};\nStandardLoginService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StandardLoginService,\n  factory: StandardLoginService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StandardLoginService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LoggerService\n    }, {\n      type: ResponseTypeValidationService\n    }, {\n      type: UrlService\n    }, {\n      type: RedirectService\n    }, {\n      type: AuthWellKnownService\n    }, {\n      type: FlowsDataService\n    }];\n  }, null);\n})();\nclass LoginService {\n  constructor(parLoginService, popUpLoginService, standardLoginService, storagePersistenceService, popupService) {\n    this.parLoginService = parLoginService;\n    this.popUpLoginService = popUpLoginService;\n    this.standardLoginService = standardLoginService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.popupService = popupService;\n  }\n  login(configuration, authOptions) {\n    const {\n      usePushedAuthorisationRequests\n    } = configuration;\n    if (authOptions?.customParams) {\n      this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);\n    }\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginPar(configuration, authOptions);\n    } else {\n      return this.standardLoginService.loginStandard(configuration, authOptions);\n    }\n  }\n  loginWithPopUp(configuration, allConfigs, authOptions, popupOptions) {\n    const isAlreadyInPopUp = this.popupService.isCurrentlyInPopup(configuration);\n    if (isAlreadyInPopUp) {\n      return of({\n        errorMessage: 'There is already a popup open.'\n      });\n    }\n    const {\n      usePushedAuthorisationRequests\n    } = configuration;\n    if (authOptions?.customParams) {\n      this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);\n    }\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions);\n    }\n    return this.popUpLoginService.loginWithPopUpStandard(configuration, allConfigs, authOptions, popupOptions);\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || LoginService)(i0.ɵɵinject(ParLoginService), i0.ɵɵinject(PopUpLoginService), i0.ɵɵinject(StandardLoginService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(PopUpService));\n};\nLoginService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoginService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ParLoginService\n    }, {\n      type: PopUpLoginService\n    }, {\n      type: StandardLoginService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: PopUpService\n    }];\n  }, null);\n})();\nfunction removeNullAndUndefinedValues(obj) {\n  const copy = {\n    ...obj\n  };\n  for (const key in obj) {\n    if (obj[key] === undefined || obj[key] === null) {\n      delete copy[key];\n    }\n  }\n  return copy;\n}\nclass LogoffRevocationService {\n  constructor(dataService, storagePersistenceService, loggerService, urlService, checkSessionService, resetAuthDataService, redirectService) {\n    this.dataService = dataService;\n    this.storagePersistenceService = storagePersistenceService;\n    this.loggerService = loggerService;\n    this.urlService = urlService;\n    this.checkSessionService = checkSessionService;\n    this.resetAuthDataService = resetAuthDataService;\n    this.redirectService = redirectService;\n  }\n  // Logs out on the server and the local client.\n  // If the server state has changed, check session, then only a local logout.\n  logoff(config, allConfigs, logoutAuthOptions) {\n    this.loggerService.logDebug(config, 'logoff, remove auth', logoutAuthOptions);\n    const {\n      urlHandler,\n      customParams\n    } = logoutAuthOptions || {};\n    const endSessionUrl = this.urlService.getEndSessionUrl(config, customParams);\n    if (!endSessionUrl) {\n      this.loggerService.logDebug(config, 'No endsessionUrl present. Logoff was only locally. Returning.');\n      return of(null);\n    }\n    if (this.checkSessionService.serverStateChanged(config)) {\n      this.loggerService.logDebug(config, 'Server State changed. Logoff was only locally. Returning.');\n      return of(null);\n    }\n    if (urlHandler) {\n      this.loggerService.logDebug(config, `Custom UrlHandler found. Using this to handle logoff with url '${endSessionUrl}'`);\n      urlHandler(endSessionUrl);\n      return of(null);\n    }\n    return this.logoffInternal(logoutAuthOptions, endSessionUrl, config, allConfigs);\n  }\n  logoffLocal(config, allConfigs) {\n    this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n    this.checkSessionService.stop();\n  }\n  logoffLocalMultiple(allConfigs) {\n    allConfigs.forEach(configuration => this.logoffLocal(configuration, allConfigs));\n  }\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n  // only the access token is revoked. Then the logout run.\n  logoffAndRevokeTokens(config, allConfigs, logoutAuthOptions) {\n    const {\n      revocationEndpoint\n    } = this.storagePersistenceService.read('authWellKnownEndPoints', config) || {};\n    if (!revocationEndpoint) {\n      this.loggerService.logDebug(config, 'revocation endpoint not supported');\n      return this.logoff(config, allConfigs, logoutAuthOptions);\n    }\n    if (this.storagePersistenceService.getRefreshToken(config)) {\n      return this.revokeRefreshToken(config).pipe(switchMap(_ => this.revokeAccessToken(config)), catchError(error => {\n        const errorMessage = `revoke token failed`;\n        this.loggerService.logError(config, errorMessage, error);\n        return throwError(() => new Error(errorMessage));\n      }), concatMap(() => this.logoff(config, allConfigs, logoutAuthOptions)));\n    } else {\n      return this.revokeAccessToken(config).pipe(catchError(error => {\n        const errorMessage = `revoke accessToken failed`;\n        this.loggerService.logError(config, errorMessage, error);\n        return throwError(() => new Error(errorMessage));\n      }), concatMap(() => this.logoff(config, allConfigs, logoutAuthOptions)));\n    }\n  }\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an access token on the STS. If no token is provided, then the token from\n  // the storage is revoked. You can pass any token to revoke. This makes it possible to\n  // manage your own tokens. The is a public API.\n  revokeAccessToken(configuration, accessToken) {\n    const accessTok = accessToken || this.storagePersistenceService.getAccessToken(configuration);\n    const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok, configuration);\n    return this.sendRevokeRequest(configuration, body);\n  }\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeRefreshToken(configuration, refreshToken) {\n    const refreshTok = refreshToken || this.storagePersistenceService.getRefreshToken(configuration);\n    const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok, configuration);\n    return this.sendRevokeRequest(configuration, body);\n  }\n  logoffInternal(logoutAuthOptions, endSessionUrl, config, allConfigs) {\n    const {\n      logoffMethod,\n      customParams\n    } = logoutAuthOptions || {};\n    if (!logoffMethod || logoffMethod === 'GET') {\n      this.redirectService.redirectTo(endSessionUrl);\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n      return of(null);\n    }\n    const {\n      state,\n      logout_hint,\n      ui_locales\n    } = customParams || {};\n    const {\n      clientId\n    } = config;\n    const idToken = this.storagePersistenceService.getIdToken(config);\n    const postLogoutRedirectUrl = this.urlService.getPostLogoutRedirectUrl(config);\n    const headers = this.getHeaders();\n    const {\n      url\n    } = this.urlService.getEndSessionEndpoint(config);\n    const body = {\n      id_token_hint: idToken,\n      client_id: clientId,\n      post_logout_redirect_uri: postLogoutRedirectUrl,\n      state,\n      logout_hint,\n      ui_locales\n    };\n    const bodyWithoutNullOrUndefined = removeNullAndUndefinedValues(body);\n    this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\n    return this.dataService.post(url, bodyWithoutNullOrUndefined, config, headers);\n  }\n  sendRevokeRequest(configuration, body) {\n    const url = this.urlService.getRevocationEndpointUrl(configuration);\n    const headers = this.getHeaders();\n    return this.dataService.post(url, body, configuration, headers).pipe(retry(2), switchMap(response => {\n      this.loggerService.logDebug(configuration, 'revocation endpoint post response: ', response);\n      return of(response);\n    }), catchError(error => {\n      const errorMessage = `Revocation request failed`;\n      this.loggerService.logError(configuration, errorMessage, error);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  getHeaders() {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n    return headers;\n  }\n}\nLogoffRevocationService.ɵfac = function LogoffRevocationService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || LogoffRevocationService)(i0.ɵɵinject(DataService), i0.ɵɵinject(StoragePersistenceService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(UrlService), i0.ɵɵinject(CheckSessionService), i0.ɵɵinject(ResetAuthDataService), i0.ɵɵinject(RedirectService));\n};\nLogoffRevocationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LogoffRevocationService,\n  factory: LogoffRevocationService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LogoffRevocationService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DataService\n    }, {\n      type: StoragePersistenceService\n    }, {\n      type: LoggerService\n    }, {\n      type: UrlService\n    }, {\n      type: CheckSessionService\n    }, {\n      type: ResetAuthDataService\n    }, {\n      type: RedirectService\n    }];\n  }, null);\n})();\nclass OidcSecurityService {\n  constructor(checkSessionService, checkAuthService, userService, tokenHelperService, configurationService, authStateService, flowsDataService, callbackService, logoffRevocationService, loginService, refreshSessionService, urlService, authWellKnownService) {\n    this.checkSessionService = checkSessionService;\n    this.checkAuthService = checkAuthService;\n    this.userService = userService;\n    this.tokenHelperService = tokenHelperService;\n    this.configurationService = configurationService;\n    this.authStateService = authStateService;\n    this.flowsDataService = flowsDataService;\n    this.callbackService = callbackService;\n    this.logoffRevocationService = logoffRevocationService;\n    this.loginService = loginService;\n    this.refreshSessionService = refreshSessionService;\n    this.urlService = urlService;\n    this.authWellKnownService = authWellKnownService;\n  }\n  /**\r\n   * Provides information about the user after they have logged in.\r\n   *\r\n   * @returns Returns an object containing either the user data directly (single config) or\r\n   * the user data per config in case you are running with multiple configs\r\n   */\n  get userData$() {\n    return this.userService.userData$;\n  }\n  /**\r\n   * Emits each time an authorization event occurs.\r\n   *\r\n   * @returns Returns an object containing if you are authenticated or not.\r\n   * Single Config: true if config is authenticated, false if not.\r\n   * Multiple Configs: true is all configs are authenticated, false if only one of them is not\r\n   *\r\n   * The `allConfigsAuthenticated` property contains the auth information _per config_.\r\n   */\n  get isAuthenticated$() {\n    return this.authStateService.authenticated$;\n  }\n  /**\r\n   * Emits each time the server sends a CheckSession event and the value changed. This property will always return\r\n   * true.\r\n   */\n  get checkSessionChanged$() {\n    return this.checkSessionService.checkSessionChanged$;\n  }\n  /**\r\n   * Emits on a Security Token Service callback. The observable will never contain a value.\r\n   */\n  get stsCallback$() {\n    return this.callbackService.stsCallback$;\n  }\n  preloadAuthWellKnownDocument(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(concatMap(config => this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config)));\n  }\n  /**\r\n   * Returns the currently active OpenID configurations.\r\n   *\r\n   * @returns an array of OpenIdConfigurations.\r\n   */\n  getConfigurations() {\n    return this.configurationService.getAllConfigurations();\n  }\n  /**\r\n   * Returns a single active OpenIdConfiguration.\r\n   *\r\n   * @param configId The configId to identify the config. If not passed, the first one is being returned\r\n   */\n  getConfiguration(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId);\n  }\n  /**\r\n   * Returns the userData for a configuration\r\n   *\r\n   * @param configId The configId to identify the config. If not passed, the first one is being used\r\n   */\n  getUserData(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.userService.getUserDataFromStore(config)));\n  }\n  /**\r\n   * Starts the complete setup flow for one configuration. Calling will start the entire authentication flow, and the returned observable\r\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\r\n   * an error message in case an error happened\r\n   *\r\n   * @param url The URL to perform the authorization on the behalf of.\r\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An object `LoginResponse` containing all information about the login\r\n   */\n  checkAuth(url, configId) {\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(concatMap(({\n      allConfigs,\n      currentConfig\n    }) => this.checkAuthService.checkAuth(currentConfig, allConfigs, url)));\n  }\n  /**\r\n   * Starts the complete setup flow for multiple configurations.\r\n   * Calling will start the entire authentication flow, and the returned observable\r\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\r\n   * an error message in case an error happened in an array for each config which was provided\r\n   *\r\n   * @param url The URL to perform the authorization on the behalf of.\r\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, all of the current\r\n   * configured ones will be used to check.\r\n   *\r\n   * @returns An array of `LoginResponse` objects containing all information about the logins\r\n   */\n  checkAuthMultiple(url) {\n    return this.configurationService.getOpenIDConfigurations().pipe(concatMap(({\n      allConfigs\n    }) => this.checkAuthService.checkAuthMultiple(allConfigs, url)));\n  }\n  /**\r\n   * Provides information about the current authenticated state\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A boolean whether the config is authenticated or not.\r\n   */\n  isAuthenticated(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.authStateService.isAuthenticated(config)));\n  }\n  /**\r\n   * Checks the server for an authenticated session using the iframe silent renew if not locally authenticated.\r\n   */\n  checkAuthIncludingServer(configId) {\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(concatMap(({\n      allConfigs,\n      currentConfig\n    }) => this.checkAuthService.checkAuthIncludingServer(currentConfig, allConfigs)));\n  }\n  /**\r\n   * Returns the access token for the login scenario.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the access token.\r\n   */\n  getAccessToken(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.authStateService.getAccessToken(config)));\n  }\n  /**\r\n   * Returns the ID token for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the id token.\r\n   */\n  getIdToken(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.authStateService.getIdToken(config)));\n  }\n  /**\r\n   * Returns the refresh token, if present, for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the refresh token.\r\n   */\n  getRefreshToken(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.authStateService.getRefreshToken(config)));\n  }\n  /**\r\n   * Returns the authentication result, if present, for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A object with the authentication result\r\n   */\n  getAuthenticationResult(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.authStateService.getAuthenticationResult(config)));\n  }\n  /**\r\n   * Returns the payload from the ID token.\r\n   *\r\n   * @param encode Set to true if the payload is base64 encoded\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The payload from the id token.\r\n   */\n  getPayloadFromIdToken(encode = false, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => {\n      const token = this.authStateService.getIdToken(config);\n      return this.tokenHelperService.getPayloadFromToken(token, encode, config);\n    }));\n  }\n  /**\r\n   * Returns the payload from the access token.\r\n   *\r\n   * @param encode Set to true if the payload is base64 encoded\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The payload from the access token.\r\n   */\n  getPayloadFromAccessToken(encode = false, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => {\n      const token = this.authStateService.getAccessToken(config);\n      return this.tokenHelperService.getPayloadFromToken(token, encode, config);\n    }));\n  }\n  /**\r\n   * Sets a custom state for the authorize request.\r\n   *\r\n   * @param state The state to set.\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   */\n  setState(state, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.flowsDataService.setAuthStateControl(state, config)));\n  }\n  /**\r\n   * Gets the state value used for the authorize request.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The state value used for the authorize request.\r\n   */\n  getState(configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.flowsDataService.getAuthStateControl(config)));\n  }\n  /**\r\n   * Redirects the user to the Security Token Service to begin the authentication process.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions The custom options for the the authentication request.\r\n   */\n  authorize(configId, authOptions) {\n    this.configurationService.getOpenIDConfiguration(configId).subscribe(config => this.loginService.login(config, authOptions));\n  }\n  /**\r\n   * Opens the Security Token Service in a new window to begin the authentication process.\r\n   *\r\n   * @param authOptions The custom options for the authentication request.\r\n   * @param popupOptions The configuration for the popup window.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An `Observable<LoginResponse>` containing all information about the login\r\n   */\n  authorizeWithPopUp(authOptions, popupOptions, configId) {\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(concatMap(({\n      allConfigs,\n      currentConfig\n    }) => this.loginService.loginWithPopUp(currentConfig, allConfigs, authOptions, popupOptions)));\n  }\n  /**\r\n   * Manually refreshes the session.\r\n   *\r\n   * @param customParams Custom parameters to pass to the refresh request.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An `Observable<LoginResponse>` containing all information about the login\r\n   */\n  forceRefreshSession(customParams, configId) {\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(concatMap(({\n      allConfigs,\n      currentConfig\n    }) => this.refreshSessionService.userForceRefreshSession(currentConfig, allConfigs, customParams)));\n  }\n  /**\r\n   * Revokes the refresh token (if present) and the access token on the server and then performs the logoff operation.\r\n   * The refresh token and and the access token are revoked on the server. If the refresh token does not exist\r\n   * only the access token is revoked. Then the logout run.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions The custom options for the request.\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\n  logoffAndRevokeTokens(configId, logoutAuthOptions) {\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(concatMap(({\n      allConfigs,\n      currentConfig\n    }) => this.logoffRevocationService.logoffAndRevokeTokens(currentConfig, allConfigs, logoutAuthOptions)));\n  }\n  /**\r\n   * Logs out on the server and the local client. If the server state has changed, confirmed via check session,\r\n   * then only a local logout is performed.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions with custom parameters and/or an custom url handler\r\n   */\n  logoff(configId, logoutAuthOptions) {\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(concatMap(({\n      allConfigs,\n      currentConfig\n    }) => this.logoffRevocationService.logoff(currentConfig, allConfigs, logoutAuthOptions)));\n  }\n  /**\r\n   * Logs the user out of the application without logging them out of the server.\r\n   * Use this method if you have _one_ config enabled.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   */\n  logoffLocal(configId) {\n    this.configurationService.getOpenIDConfigurations(configId).subscribe(({\n      allConfigs,\n      currentConfig\n    }) => this.logoffRevocationService.logoffLocal(currentConfig, allConfigs));\n  }\n  /**\r\n   * Logs the user out of the application for all configs without logging them out of the server.\r\n   * Use this method if you have _multiple_ configs enabled.\r\n   */\n  logoffLocalMultiple() {\n    this.configurationService.getOpenIDConfigurations().subscribe(({\n      allConfigs\n    }) => this.logoffRevocationService.logoffLocalMultiple(allConfigs));\n  }\n  /**\r\n   * Revokes an access token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\r\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n   * https://tools.ietf.org/html/rfc7009\r\n   *\r\n   * @param accessToken The access token to revoke.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\n  revokeAccessToken(accessToken, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(concatMap(config => this.logoffRevocationService.revokeAccessToken(config, accessToken)));\n  }\n  /**\r\n   * Revokes a refresh token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\r\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n   * https://tools.ietf.org/html/rfc7009\r\n   *\r\n   * @param refreshToken The access token to revoke.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\n  revokeRefreshToken(refreshToken, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(concatMap(config => this.logoffRevocationService.revokeRefreshToken(config, refreshToken)));\n  }\n  /**\r\n   * Creates the end session URL which can be used to implement an alternate server logout.\r\n   *\r\n   * @param customParams\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the end session url or null\r\n   */\n  getEndSessionUrl(customParams, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map(config => this.urlService.getEndSessionUrl(config, customParams)));\n  }\n  /**\r\n   * Creates the authorize URL based on your flow\r\n   *\r\n   * @param customParams\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the authorize URL or null\r\n   */\n  getAuthorizeUrl(customParams, configId) {\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(concatMap(config => this.urlService.getAuthorizeUrl(config, customParams ? {\n      customParams\n    } : undefined)));\n  }\n}\nOidcSecurityService.ɵfac = function OidcSecurityService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || OidcSecurityService)(i0.ɵɵinject(CheckSessionService), i0.ɵɵinject(CheckAuthService), i0.ɵɵinject(UserService), i0.ɵɵinject(TokenHelperService), i0.ɵɵinject(ConfigurationService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(FlowsDataService), i0.ɵɵinject(CallbackService), i0.ɵɵinject(LogoffRevocationService), i0.ɵɵinject(LoginService), i0.ɵɵinject(RefreshSessionService), i0.ɵɵinject(UrlService), i0.ɵɵinject(AuthWellKnownService));\n};\nOidcSecurityService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OidcSecurityService,\n  factory: OidcSecurityService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OidcSecurityService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: CheckSessionService\n    }, {\n      type: CheckAuthService\n    }, {\n      type: UserService\n    }, {\n      type: TokenHelperService\n    }, {\n      type: ConfigurationService\n    }, {\n      type: AuthStateService\n    }, {\n      type: FlowsDataService\n    }, {\n      type: CallbackService\n    }, {\n      type: LogoffRevocationService\n    }, {\n      type: LoginService\n    }, {\n      type: RefreshSessionService\n    }, {\n      type: UrlService\n    }, {\n      type: AuthWellKnownService\n    }];\n  }, null);\n})();\nclass DefaultSessionStorageService {\n  read(key) {\n    return sessionStorage.getItem(key);\n  }\n  write(key, value) {\n    sessionStorage.setItem(key, value);\n  }\n  remove(key) {\n    sessionStorage.removeItem(key);\n  }\n  clear() {\n    sessionStorage.clear();\n  }\n}\nDefaultSessionStorageService.ɵfac = function DefaultSessionStorageService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || DefaultSessionStorageService)();\n};\nDefaultSessionStorageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DefaultSessionStorageService,\n  factory: DefaultSessionStorageService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DefaultSessionStorageService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createStaticLoader(passedConfig) {\n  return new StsConfigStaticLoader(passedConfig.config);\n}\nconst PASSED_CONFIG = new InjectionToken('PASSED_CONFIG');\nclass AuthModule {\n  static forRoot(passedConfig) {\n    return {\n      ngModule: AuthModule,\n      providers: [\n      // Make the PASSED_CONFIG available through injection\n      {\n        provide: PASSED_CONFIG,\n        useValue: passedConfig\n      },\n      // Create the loader: Either the one getting passed or a static one\n      passedConfig?.loader || {\n        provide: StsConfigLoader,\n        useFactory: createStaticLoader,\n        deps: [PASSED_CONFIG]\n      }, ConfigurationService, PublicEventsService, FlowHelper, OidcSecurityService, TokenValidationService, PlatformProvider, CheckSessionService, FlowsDataService, FlowsService, SilentRenewService, LogoffRevocationService, UserService, RandomService, HttpBaseService, UrlService, AuthStateService, SigninKeyDataService, StoragePersistenceService, TokenHelperService, IFrameService, EqualityService, LoginService, ParService, AuthWellKnownDataService, AuthWellKnownService, DataService, StateValidationService, ConfigValidationService, CheckAuthService, ResetAuthDataService, ImplicitFlowCallbackService, HistoryJwtKeysCallbackHandlerService, ResponseTypeValidationService, UserCallbackHandlerService, StateValidationCallbackHandlerService, RefreshSessionCallbackHandlerService, RefreshTokenCallbackHandlerService, CodeFlowCallbackHandlerService, ImplicitFlowCallbackHandlerService, ParLoginService, PopUpLoginService, StandardLoginService, AutoLoginService, JwkExtractor, JwkWindowCryptoService, JwtWindowCryptoService, CurrentUrlService, ClosestMatchingRouteService, DefaultSessionStorageService, BrowserStorageService, CryptoService, LoggerService, {\n        provide: AbstractSecurityStorage,\n        useClass: DefaultSessionStorageService\n      }, {\n        provide: AbstractLoggerService,\n        useClass: ConsoleLoggerService\n      }]\n    };\n  }\n}\nAuthModule.ɵfac = function AuthModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AuthModule)();\n};\nAuthModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthModule,\n  imports: [CommonModule, HttpClientModule]\n});\nAuthModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, HttpClientModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, HttpClientModule],\n      declarations: [],\n      exports: []\n    }]\n  }], null, null);\n})();\nclass AutoLoginAllRoutesGuard {\n  constructor(autoLoginService, checkAuthService, loginService, configurationService, router) {\n    this.autoLoginService = autoLoginService;\n    this.checkAuthService = checkAuthService;\n    this.loginService = loginService;\n    this.configurationService = configurationService;\n    this.router = router;\n  }\n  canLoad() {\n    return this.checkAuth(this.router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '');\n  }\n  canActivate(route, state) {\n    return this.checkAuth(state.url);\n  }\n  canActivateChild(route, state) {\n    return this.checkAuth(state.url);\n  }\n  checkAuth(url) {\n    return this.configurationService.getOpenIDConfiguration().pipe(switchMap(config => {\n      const allconfigs = this.configurationService.getAllConfigurations();\n      return this.checkAuthService.checkAuth(config, allconfigs).pipe(take(1), map(({\n        isAuthenticated\n      }) => {\n        if (isAuthenticated) {\n          this.autoLoginService.checkSavedRedirectRouteAndNavigate(config);\n        }\n        if (!isAuthenticated) {\n          this.autoLoginService.saveRedirectRoute(config, url);\n          this.loginService.login(config);\n        }\n        return isAuthenticated;\n      }));\n    }));\n  }\n}\nAutoLoginAllRoutesGuard.ɵfac = function AutoLoginAllRoutesGuard_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AutoLoginAllRoutesGuard)(i0.ɵɵinject(AutoLoginService), i0.ɵɵinject(CheckAuthService), i0.ɵɵinject(LoginService), i0.ɵɵinject(ConfigurationService), i0.ɵɵinject(i2.Router));\n};\nAutoLoginAllRoutesGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AutoLoginAllRoutesGuard,\n  factory: AutoLoginAllRoutesGuard.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutoLoginAllRoutesGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: AutoLoginService\n    }, {\n      type: CheckAuthService\n    }, {\n      type: LoginService\n    }, {\n      type: ConfigurationService\n    }, {\n      type: i2.Router\n    }];\n  }, null);\n})();\nclass AutoLoginPartialRoutesGuard {\n  constructor(autoLoginService, authStateService, loginService, configurationService, router) {\n    this.autoLoginService = autoLoginService;\n    this.authStateService = authStateService;\n    this.loginService = loginService;\n    this.configurationService = configurationService;\n    this.router = router;\n  }\n  canLoad() {\n    return this.checkAuth(this.router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '');\n  }\n  canActivate(route, state) {\n    return this.checkAuth(state.url);\n  }\n  canActivateChild(route, state) {\n    return this.checkAuth(state.url);\n  }\n  checkAuth(url) {\n    return this.configurationService.getOpenIDConfiguration().pipe(map(configuration => {\n      const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configuration);\n      if (isAuthenticated) {\n        this.autoLoginService.checkSavedRedirectRouteAndNavigate(configuration);\n      }\n      if (!isAuthenticated) {\n        this.autoLoginService.saveRedirectRoute(configuration, url);\n        this.loginService.login(configuration);\n      }\n      return isAuthenticated;\n    }));\n  }\n}\nAutoLoginPartialRoutesGuard.ɵfac = function AutoLoginPartialRoutesGuard_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AutoLoginPartialRoutesGuard)(i0.ɵɵinject(AutoLoginService), i0.ɵɵinject(AuthStateService), i0.ɵɵinject(LoginService), i0.ɵɵinject(ConfigurationService), i0.ɵɵinject(i2.Router));\n};\nAutoLoginPartialRoutesGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AutoLoginPartialRoutesGuard,\n  factory: AutoLoginPartialRoutesGuard.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutoLoginPartialRoutesGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: AutoLoginService\n    }, {\n      type: AuthStateService\n    }, {\n      type: LoginService\n    }, {\n      type: ConfigurationService\n    }, {\n      type: i2.Router\n    }];\n  }, null);\n})();\nclass AuthInterceptor {\n  constructor(authStateService, configurationService, loggerService, closestMatchingRouteService) {\n    this.authStateService = authStateService;\n    this.configurationService = configurationService;\n    this.loggerService = loggerService;\n    this.closestMatchingRouteService = closestMatchingRouteService;\n  }\n  intercept(req, next) {\n    return interceptRequest(req, next.handle, {\n      configurationService: this.configurationService,\n      authStateService: this.authStateService,\n      closestMatchingRouteService: this.closestMatchingRouteService,\n      loggerService: this.loggerService\n    });\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || AuthInterceptor)(i0.ɵɵinject(AuthStateService), i0.ɵɵinject(ConfigurationService), i0.ɵɵinject(LoggerService), i0.ɵɵinject(ClosestMatchingRouteService));\n};\nAuthInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AuthStateService\n    }, {\n      type: ConfigurationService\n    }, {\n      type: LoggerService\n    }, {\n      type: ClosestMatchingRouteService\n    }];\n  }, null);\n})();\nfunction authInterceptor() {\n  return (req, next) => {\n    return interceptRequest(req, next, {\n      configurationService: inject(ConfigurationService),\n      authStateService: inject(AuthStateService),\n      closestMatchingRouteService: inject(ClosestMatchingRouteService),\n      loggerService: inject(LoggerService)\n    });\n  };\n}\nfunction interceptRequest(req, next, deps) {\n  if (!deps.configurationService.hasAtLeastOneConfig()) {\n    return next(req);\n  }\n  const allConfigurations = deps.configurationService.getAllConfigurations();\n  const allRoutesConfigured = allConfigurations.map(x => x.secureRoutes || []);\n  const allRoutesConfiguredFlat = [].concat(...allRoutesConfigured);\n  if (allRoutesConfiguredFlat.length === 0) {\n    deps.loggerService.logDebug(allConfigurations[0], `No routes to check configured`);\n    return next(req);\n  }\n  const {\n    matchingConfig,\n    matchingRoute\n  } = deps.closestMatchingRouteService.getConfigIdForClosestMatchingRoute(req.url, allConfigurations);\n  if (!matchingConfig) {\n    deps.loggerService.logDebug(allConfigurations[0], `Did not find any configured route for route ${req.url}`);\n    return next(req);\n  }\n  deps.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}'`);\n  const token = deps.authStateService.getAccessToken(matchingConfig);\n  if (!token) {\n    deps.loggerService.logDebug(matchingConfig, `Wanted to add token to ${req.url} but found no token: '${token}'`);\n    return next(req);\n  }\n  deps.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}', adding token`);\n  req = req.clone({\n    headers: req.headers.set('Authorization', 'Bearer ' + token)\n  });\n  return next(req);\n}\n\n// Public classes.\n\n/*\r\n * Public API Surface of angular-auth-oidc-client\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AbstractLoggerService, AbstractSecurityStorage, AuthInterceptor, AuthModule, AutoLoginAllRoutesGuard, AutoLoginPartialRoutesGuard, ConfigurationService, EventTypes, LogLevel, OidcSecurityService, OpenIdConfigLoader, PASSED_CONFIG, PopUpService, PublicEventsService, StateValidationResult, StsConfigHttpLoader, StsConfigLoader, StsConfigStaticLoader, ValidationResult, authInterceptor, createStaticLoader };\n"],
  "mappings": "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",
  "names": ["base16", "base32", "base32hex", "base64", "base64url", "codec", "cjs", "EventTypes", "LogLevel", "base64", "ValidationResult"]
}
