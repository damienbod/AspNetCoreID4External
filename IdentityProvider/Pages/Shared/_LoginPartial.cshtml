@using Microsoft.AspNetCore.Identity
@using IdentityProvider.Models
@using Microsoft.IdentityModel.Tokens
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    var user = await UserManager.GetUserAsync(User); 
}

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link" asp-page="/Account/Manage/Index" title="Manage">
            @if (user != null && !string.IsNullOrEmpty(user.Photo))
            {
                <img class="rounded-circle me-1" height="24" src="data:image;base64,@System.Convert.ToBase64String(Base64UrlEncoder.DecodeBytes(user!.Photo))" />
            }
            
            @UserManager.GetUserName(User)</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-page="/Account/Logout/Index" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link" id="register" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
            <a class="nav-link" id="login" asp-page="/Account/Login/Index">Login</a>
    </li>
}
</ul>
